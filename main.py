import logging
import json
import asyncio
from pathlib import Path
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π
from modules.role_manager import RoleManager
from modules.system_monitor import SystemMonitor
from modules.process_manager import ProcessManager
from modules.cloud_storage import CloudStorage
from modules.notification import NotificationManager
from modules.web_interface import WebInterface
from modules.ai_assistant import AIAssistant
from modules.security_monitor import SecurityMonitor
from modules.analytics import Analytics

# –ò–º–ø–æ—Ä—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
from handlers.main_menu import show_main_menu
from handlers.system_handlers import system_status
from handlers.server_handlers import server_status
from handlers.storage_handlers import list_files
from handlers.admin_handlers import list_users
from handlers.callback_handlers import CallbackHandlers
from handlers.file_handlers import FileHandlers
from handlers.menu_buttons import MenuButtons

CONFIG_PATH = 'config.json'

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open(CONFIG_PATH, 'r', encoding='utf-8') as f:
    config = json.load(f)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, config.get('logging', {}).get('level', 'INFO')),
    format='%(asctime)s [%(levelname)s] %(name)s: %(message)s',
    handlers=[
        logging.FileHandler(config.get('logging', {}).get('file', 'logs/sella_bot.log'), encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger('SellaBot')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥—É–ª–µ–π
role_manager = RoleManager(config)
system_monitor = SystemMonitor(config, role_manager)
process_manager = ProcessManager(config, role_manager)
cloud_storage = CloudStorage(config, role_manager)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
web_interface = WebInterface(config, role_manager, system_monitor, process_manager, cloud_storage)
ai_assistant = AIAssistant(config, role_manager, system_monitor, process_manager, None)  # notification_manager –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–∑–∂–µ
security_monitor = SecurityMonitor(config, role_manager, system_monitor, process_manager, None)  # notification_manager –±—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ–∑–∂–µ
analytics = Analytics(config, role_manager, system_monitor, process_manager, cloud_storage)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞
def main():
    application = Application.builder().token(config['bot_token']).build()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ø–µ—Ä–µ–¥–∞–µ–º application.bot)
    notification_manager = NotificationManager(config, role_manager, application.bot)
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ notification_manager –≤ –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª—è—Ö
    ai_assistant.notification_manager = notification_manager
    security_monitor.notification_manager = notification_manager

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    callback_handlers = CallbackHandlers(role_manager, system_monitor, process_manager, cloud_storage, notification_manager, analytics)
    file_handlers = FileHandlers(cloud_storage, role_manager)

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –º–µ–Ω—é
    async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update.effective_user or not update.message:
            return
        
        user_id = update.effective_user.id
        user_info = await role_manager.get_user_info(user_id)
        name = user_info["name"] if user_info else "–ì–æ—Å—Ç—å"
        role = user_info["role"] if user_info else "guest"
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º–µ–Ω—é
        user_menu = await role_manager.get_user_menu(user_id)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é
        keyboard = await MenuButtons.create_main_menu(user_menu)
        
        await update.message.reply_text(
            f"üëã –ü—Ä–∏–≤–µ—Ç, {name}!\n\n–¢—ã ‚Äî {role}.\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞-–º–µ–Ω–µ–¥–∂–µ—Ä–∞ –°–µ–ª–ª–∞!\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=keyboard
        )

    application.add_handler(CommandHandler("start", start))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("menu", lambda u, c: show_main_menu(u, c, role_manager)))
    application.add_handler(CommandHandler("status", lambda u, c: system_status(u, c, system_monitor, role_manager)))
    application.add_handler(CommandHandler("server", lambda u, c: server_status(u, c)))
    application.add_handler(CommandHandler("storage", lambda u, c: list_files(u, c, cloud_storage, role_manager)))
    application.add_handler(CommandHandler("users", lambda u, c: list_users(u, c, role_manager)))

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not update.message:
            return
        await update.message.reply_text(
            "ü§ñ **–°–µ–ª–ª–∞ - –ö–æ–º–∞–Ω–¥—ã**\n\n"
            "/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
            "/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã\n"
            "/server - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º\n"
            "/storage - –û–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ\n"
            "/users - –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω)\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
        )
    
    application.add_handler(CommandHandler("help", help_command))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–∫–Ω–æ–ø–∫–∏)
    from telegram.ext import CallbackQueryHandler
    application.add_handler(CallbackQueryHandler(lambda u, c: callback_handlers.handle_callback(u, c)))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∞–π–ª–æ–≤
    from telegram.ext import MessageHandler, filters
    application.add_handler(MessageHandler(filters.Document.ALL, lambda u, c: file_handlers.handle_document(u, c)))
    application.add_handler(MessageHandler(filters.PHOTO, lambda u, c: file_handlers.handle_photo(u, c)))
    application.add_handler(MessageHandler(filters.VIDEO, lambda u, c: file_handlers.handle_video(u, c)))
    application.add_handler(MessageHandler(filters.AUDIO, lambda u, c: file_handlers.handle_audio(u, c)))

    # –§–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    # –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è:
    # if web_interface.enabled:
    #     asyncio.create_task(web_interface.start_server())
    # if security_monitor.enabled:
    #     asyncio.create_task(security_monitor.start_security_monitoring())
    # if analytics.enabled:
    #     asyncio.create_task(analytics.start_analytics())
    
    logger.info("–ë–æ—Ç –°–µ–ª–ª–∞ –∑–∞–ø—É—â–µ–Ω!")
    application.run_polling()

if __name__ == "__main__":
    main() 