import psutil
import platform
import os
import json
import time
from datetime import datetime, timedelta
from typing import Dict, Any, List
import logging

logger = logging.getLogger(__name__)

class SystemMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ —à–∫–∞–ª–∞–º–∏ –∏ —Å–±–æ—Ä–æ–º –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self, storage_path: str = "data"):
        self.storage_path = storage_path
        self.memory_data_file = os.path.join(storage_path, "memory_history.json")
        self.ensure_storage_exists()
        self.load_memory_history()
    
    def ensure_storage_exists(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        if not os.path.exists(self.storage_path):
            os.makedirs(self.storage_path)
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö: {self.storage_path}")
    
    def load_memory_history(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞–º—è—Ç–∏"""
        try:
            if os.path.exists(self.memory_data_file):
                with open(self.memory_data_file, 'r', encoding='utf-8') as f:
                    self.memory_history = json.load(f)
            else:
                self.memory_history = []
                self.save_memory_history()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–∞–º—è—Ç–∏: {e}")
            self.memory_history = []
    
    def save_memory_history(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞–º—è—Ç–∏"""
        try:
            with open(self.memory_data_file, 'w', encoding='utf-8') as f:
                json.dump(self.memory_history, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–∞–º—è—Ç–∏: {e}")
    
    def create_progress_bar(self, value: float, max_value: float, width: int = 20) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–π —à–∫–∞–ª—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        if max_value <= 0:
            return "‚ñà" * width
        
        percentage = min(value / max_value, 1.0)
        filled = int(percentage * width)
        empty = width - filled
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞
        if percentage < 0.5:
            color = "üü¢"  # –ó–µ–ª–µ–Ω—ã–π
        elif percentage < 0.8:
            color = "üü°"  # –ñ–µ–ª—Ç—ã–π
        else:
            color = "üî¥"  # –ö—Ä–∞—Å–Ω—ã–π
        
        bar = "‚ñà" * filled + "‚ñë" * empty
        return f"{color} {bar} {percentage*100:.1f}%"
    
    def get_cpu_usage(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ CPU"""
        try:
            cpu_percent = psutil.cpu_percent(interval=1)
            cpu_count = psutil.cpu_count()
            cpu_freq = psutil.cpu_freq()
            
            return {
                "usage": cpu_percent,
                "count": cpu_count,
                "frequency": cpu_freq.current if cpu_freq else 0,
                "bar": self.create_progress_bar(cpu_percent, 100)
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö CPU: {e}")
            return {"usage": 0, "count": 0, "frequency": 0, "bar": "‚ùå –û—à–∏–±–∫–∞"}
    
    def get_memory_usage(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏"""
        try:
            memory = psutil.virtual_memory()
            swap = psutil.swap_memory()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏
            self.add_memory_data(memory.percent, memory.used, memory.total)
            
            return {
                "used": memory.used,
                "total": memory.total,
                "percent": memory.percent,
                "available": memory.available,
                "swap_used": swap.used,
                "swap_total": swap.total,
                "swap_percent": swap.percent,
                "bar": self.create_progress_bar(memory.used, memory.total),
                "swap_bar": self.create_progress_bar(swap.used, swap.total) if swap.total > 0 else "üü¢ ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 0.0%"
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∞–º—è—Ç–∏: {e}")
            return {"used": 0, "total": 0, "percent": 0, "available": 0, "bar": "‚ùå –û—à–∏–±–∫–∞"}
    
    def get_disk_usage(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–∞—Ö"""
        try:
            disk_usage = psutil.disk_usage('/')
            disk_io = psutil.disk_io_counters()
            
            return {
                "used": disk_usage.used,
                "total": disk_usage.total,
                "free": disk_usage.free,
                "percent": disk_usage.percent,
                "read_bytes": disk_io.read_bytes if disk_io else 0,
                "write_bytes": disk_io.write_bytes if disk_io else 0,
                "bar": self.create_progress_bar(disk_usage.used, disk_usage.total)
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∏—Å–∫–∞: {e}")
            return {"used": 0, "total": 0, "free": 0, "percent": 0, "bar": "‚ùå –û—à–∏–±–∫–∞"}
    
    def get_network_usage(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏"""
        try:
            network_io = psutil.net_io_counters()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å —Å–µ—Ç–∏ (–±–∞–π—Ç/—Å–µ–∫)
            if hasattr(self, '_last_network_io'):
                time_diff = time.time() - self._last_network_time
                bytes_sent_diff = network_io.bytes_sent - self._last_network_io.bytes_sent
                bytes_recv_diff = network_io.bytes_recv - self._last_network_io.bytes_recv
                
                upload_speed = bytes_sent_diff / time_diff if time_diff > 0 else 0
                download_speed = bytes_recv_diff / time_diff if time_diff > 0 else 0
            else:
                upload_speed = 0
                download_speed = 0
            
            self._last_network_io = network_io
            self._last_network_time = time.time()
            
            return {
                "bytes_sent": network_io.bytes_sent,
                "bytes_recv": network_io.bytes_recv,
                "upload_speed": upload_speed,
                "download_speed": download_speed,
                "packets_sent": network_io.packets_sent,
                "packets_recv": network_io.packets_recv
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–µ—Ç–∏: {e}")
            return {"bytes_sent": 0, "bytes_recv": 0, "upload_speed": 0, "download_speed": 0}
    
    def get_battery_info(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–∞—Ç–∞—Ä–µ–µ"""
        try:
            battery = psutil.sensors_battery()
            if battery:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞—Ç–∞—Ä–µ–∏
                if battery.power_plugged:
                    status = "üîå –ó–∞—Ä—è–∂–∞–µ—Ç—Å—è"
                else:
                    if battery.percent > 20:
                        status = "üîã –†–∞–±–æ—Ç–∞–µ—Ç –æ—Ç –±–∞—Ç–∞—Ä–µ–∏"
                    else:
                        status = "‚ö†Ô∏è –ù–∏–∑–∫–∏–π –∑–∞—Ä—è–¥"
                
                # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã
                if battery.secsleft != -1:
                    hours = battery.secsleft // 3600
                    minutes = (battery.secsleft % 3600) // 60
                    time_left = f"{hours}—á {minutes}–º"
                else:
                    time_left = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                
                return {
                    "percent": battery.percent,
                    "power_plugged": battery.power_plugged,
                    "time_left": time_left,
                    "status": status,
                    "bar": self.create_progress_bar(battery.percent, 100)
                }
            else:
                return {
                    "percent": 0,
                    "power_plugged": False,
                    "time_left": "–ù/–î",
                    "status": "üîå –ù–µ—Ç –±–∞—Ç–∞—Ä–µ–∏",
                    "bar": "üîå ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 0.0%"
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–∞—Ç–∞—Ä–µ–∏: {e}")
            return {
                "percent": 0,
                "power_plugged": False,
                "time_left": "–û—à–∏–±–∫–∞",
                "status": "‚ùå –û—à–∏–±–∫–∞",
                "bar": "‚ùå ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 0.0%"
            }
    
    def get_temperature(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ"""
        try:
            temperatures = psutil.sensors_temperatures()
            if temperatures:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –¥–æ—Å—Ç—É–ø–Ω—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
                for name, entries in temperatures.items():
                    if entries:
                        temp = entries[0].current
                        return {
                            "temperature": temp,
                            "unit": "¬∞C",
                            "status": "üå°Ô∏è –ù–æ—Ä–º–∞–ª—å–Ω–∞—è" if temp < 70 else "üå°Ô∏è –í—ã—Å–æ–∫–∞—è"
                        }
            
            return {"temperature": 0, "unit": "¬∞C", "status": "üå°Ô∏è –ù/–î"}
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: {e}")
            return {"temperature": 0, "unit": "¬∞C", "status": "‚ùå –û—à–∏–±–∫–∞"}
    
    def format_bytes(self, bytes_value: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–π—Ç–æ–≤ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
        for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
            if bytes_value < 1024.0:
                return f"{bytes_value:.1f}{unit}"
            bytes_value /= 1024.0
        return f"{bytes_value:.1f}PB"
    
    def add_memory_data(self, percent: float, used: int, total: int):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–∞–º—è—Ç–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        try:
            timestamp = datetime.now().isoformat()
            data = {
                "timestamp": timestamp,
                "percent": percent,
                "used": used,
                "total": total,
                "used_formatted": self.format_bytes(used),
                "total_formatted": self.format_bytes(total)
            }
            
            self.memory_history.append(data)
            
            # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            cutoff_time = datetime.now() - timedelta(hours=24)
            self.memory_history = [
                entry for entry in self.memory_history
                if datetime.fromisoformat(entry["timestamp"]) > cutoff_time
            ]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
            if len(self.memory_history) % 10 == 0:
                self.save_memory_history()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∞–º—è—Ç–∏: {e}")
    
    def get_memory_history(self, hours: int = 24) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        try:
            cutoff_time = datetime.now() - timedelta(hours=hours)
            return [
                entry for entry in self.memory_history
                if datetime.fromisoformat(entry["timestamp"]) > cutoff_time
            ]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–∞–º—è—Ç–∏: {e}")
            return []
    
    def get_memory_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        try:
            history = self.get_memory_history(24)
            if not history:
                return {"avg_percent": 0, "max_percent": 0, "min_percent": 0}
            
            percents = [entry["percent"] for entry in history]
            return {
                "avg_percent": sum(percents) / len(percents),
                "max_percent": max(percents),
                "min_percent": min(percents),
                "data_points": len(history)
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
            return {"avg_percent": 0, "max_percent": 0, "min_percent": 0}
    
    async def get_system_status(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã —Å –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–º–∏ —à–∫–∞–ª–∞–º–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            cpu = self.get_cpu_usage()
            memory = self.get_memory_usage()
            disk = self.get_disk_usage()
            network = self.get_network_usage()
            battery = self.get_battery_info()
            temperature = self.get_temperature()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            status = "üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã**\n\n"
            
            # CPU
            status += f"üñ•Ô∏è **CPU** ({cpu['count']} —è–¥–µ—Ä)\n"
            status += f"   {cpu['bar']}\n"
            status += f"   –ß–∞—Å—Ç–æ—Ç–∞: {cpu['frequency']:.0f}MHz\n\n"
            
            # RAM
            status += f"üíæ **RAM**\n"
            status += f"   {memory['bar']}\n"
            status += f"   {self.format_bytes(memory['used'])} / {self.format_bytes(memory['total'])}\n"
            
            # Swap (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if memory.get('swap_total', 0) > 0:
                status += f"   Swap: {memory['swap_bar']}\n"
                status += f"   {self.format_bytes(memory['swap_used'])} / {self.format_bytes(memory['swap_total'])}\n"
            status += "\n"
            
            # –î–∏—Å–∫
            status += f"üíø **–î–∏—Å–∫**\n"
            status += f"   {disk['bar']}\n"
            status += f"   {self.format_bytes(disk['used'])} / {self.format_bytes(disk['total'])}\n"
            status += f"   –°–≤–æ–±–æ–¥–Ω–æ: {self.format_bytes(disk['free'])}\n\n"
            
            # –°–µ—Ç—å
            status += f"üì° **–°–µ—Ç—å**\n"
            status += f"   ‚Üë {self.format_bytes(network['upload_speed'])}/s\n"
            status += f"   ‚Üì {self.format_bytes(network['download_speed'])}/s\n"
            status += f"   –í—Å–µ–≥–æ: ‚Üë {self.format_bytes(network['bytes_sent'])} ‚Üì {self.format_bytes(network['bytes_recv'])}\n\n"
            
            # –ë–∞—Ç–∞—Ä–µ—è
            status += f"üîã **–ë–∞—Ç–∞—Ä–µ—è**\n"
            status += f"   {battery['bar']}\n"
            status += f"   {battery['status']}\n"
            if battery['time_left'] != "–ù/–î":
                status += f"   –í—Ä–µ–º—è: {battery['time_left']}\n"
            status += "\n"
            
            # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
            if temperature['temperature'] > 0:
                status += f"üå°Ô∏è **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞**\n"
                status += f"   {temperature['temperature']:.1f}¬∞C - {temperature['status']}\n\n"
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏ –∑–∞ 24 —á–∞—Å–∞
            memory_stats = self.get_memory_stats()
            if memory_stats['data_points'] > 0:
                status += f"üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞–º—è—Ç–∏ (24—á)**\n"
                status += f"   –°—Ä–µ–¥–Ω–µ–µ: {memory_stats['avg_percent']:.1f}%\n"
                status += f"   –ú–∞–∫—Å–∏–º—É–º: {memory_stats['max_percent']:.1f}%\n"
                status += f"   –ú–∏–Ω–∏–º—É–º: {memory_stats['min_percent']:.1f}%\n"
                status += f"   –ó–∞–ø–∏—Å–µ–π: {memory_stats['data_points']}\n"
            
            return status
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return "‚ùå **–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã**"
    
    def cleanup_old_data(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–≤—ã–∑—ã–≤–∞—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏)"""
        try:
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π
            cutoff_time = datetime.now() - timedelta(days=7)
            self.memory_history = [
                entry for entry in self.memory_history
                if datetime.fromisoformat(entry["timestamp"]) > cutoff_time
            ]
            self.save_memory_history()
            logger.info("–û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}") 