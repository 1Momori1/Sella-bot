from telegram import Update
from telegram.ext import ContextTypes
from typing import Dict, Any
import logging
import asyncio
import os

logger = logging.getLogger(__name__)

class CallbackHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    
    def __init__(self, role_manager, system_monitor, process_manager, cloud_storage, notification_manager, analytics=None):
        self.role_manager = role_manager
        self.system_monitor = system_monitor
        self.process_manager = process_manager
        self.cloud_storage = cloud_storage
        self.notification_manager = notification_manager
        self.analytics = analytics
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤
        self.active_monitors = {}
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        if not query or not query.from_user or not query.data:
            return
        
        user_id = query.from_user.id
        callback_data = query.data
        
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ callback
            if callback_data == "main_menu":
                await self.show_main_menu(update, context, user_id)
            # –†–∞–∑–¥–µ–ª—ã
            elif callback_data == "section_system":
                await self.show_system_section(update, context, user_id)
            elif callback_data == "section_server":
                await self.show_server_section(update, context, user_id)
            elif callback_data == "section_storage":
                await self.show_storage_section(update, context, user_id)
            elif callback_data == "section_admin":
                await self.show_admin_section(update, context, user_id)
            # –°–∏—Å—Ç–µ–º–∞
            elif callback_data == "system_monitor":
                await self.start_system_monitor(update, context, user_id)
            elif callback_data == "system_monitor_stop":
                await self.stop_system_monitor(update, context, user_id)
            elif callback_data == "system_settings":
                await self.show_system_settings(update, context, user_id)
            elif callback_data == "notifications_settings":
                await self.show_notifications_settings(update, context, user_id)
            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            elif callback_data == "analytics_dashboard":
                await self.show_analytics_dashboard(update, context, user_id)
            elif callback_data == "analytics_summary":
                await self.create_system_summary(update, context, user_id)
            elif callback_data == "analytics_bot_events":
                await self.show_bot_events(update, context, user_id)
            elif callback_data == "analytics_users":
                await self.show_user_activity(update, context, user_id)
            elif callback_data == "analytics_full_report":
                await self.show_full_report(update, context, user_id)
            # –°–µ—Ä–≤–µ—Ä
            elif callback_data == "server_status":
                await self.show_server_status(update, context, user_id)
            elif callback_data == "server_restart":
                await self.restart_bot(update, context, user_id)
            elif callback_data == "server_restart_confirm":
                await self.confirm_restart(update, context, user_id)
            elif callback_data == "server_processes":
                await self.show_processes(update, context, user_id)
            elif callback_data == "server_backup":
                await self.create_backup(update, context, user_id)
            elif callback_data.startswith("backup_download_"):
                backup_name = callback_data.replace("backup_download_", "")
                await self.download_backup(update, context, user_id, backup_name)
            elif callback_data.startswith("backup_delete_"):
                backup_name = callback_data.replace("backup_delete_", "")
                await self.delete_backup(update, context, user_id, backup_name)
            # –•—Ä–∞–Ω–∏–ª–∏—â–µ
            elif callback_data == "storage_list":
                await self.show_storage_list(update, context, user_id)
            elif callback_data == "storage_upload":
                await self.show_storage_upload(update, context, user_id)
            elif callback_data == "storage_download":
                await self.show_storage_download(update, context, user_id)
            elif callback_data == "storage_delete":
                await self.show_storage_delete(update, context, user_id)
            elif callback_data == "storage_search":
                await self.show_storage_search(update, context, user_id)
            elif callback_data == "storage_refresh":
                await self.show_storage_list(update, context, user_id)
            # –ê–¥–º–∏–Ω–∫–∞
            elif callback_data == "admin_users":
                await self.show_admin_users(update, context, user_id)
            elif callback_data == "admin_add_user":
                await self.add_user(update, context, user_id)
            elif callback_data == "admin_add_user_id":
                await self.show_add_user_form(update, context, user_id)
            elif callback_data.startswith("admin_role_"):
                await self.set_user_role(update, context, user_id)
            elif callback_data == "admin_delete_user":
                await self.delete_user(update, context, user_id)
            elif callback_data.startswith("admin_delete_confirm_"):
                await self.confirm_delete_user(update, context, user_id)
            elif callback_data.startswith("admin_delete_final_"):
                await self.final_delete_user(update, context, user_id)
            elif callback_data == "admin_permissions":
                await self.show_admin_permissions(update, context, user_id)
            elif callback_data == "admin_logs":
                await self.show_logs(update, context, user_id)
            elif callback_data == "admin_full_log":
                await self.show_full_log(update, context, user_id)
            elif callback_data == "admin_config":
                await self.show_admin_config(update, context, user_id)
            # –û–±—â–∏–µ
            elif callback_data == "refresh":
                await self.refresh_current_menu(update, context, user_id)
            elif callback_data == "close":
                await self.close_menu(update, context)
            elif callback_data == "no_action":
                await query.answer()  # –ü—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º —á–∞—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏
            elif callback_data == "cancel":
                await self.show_main_menu(update, context, user_id)
            elif callback_data == "help":
                await self.show_help(update, context, user_id)
            elif callback_data == "help_setup_guide":
                await self.show_setup_guide(update, context, user_id)
            elif callback_data == "help_troubleshooting":
                await self.show_troubleshooting(update, context, user_id)
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            elif callback_data.startswith("file_info_"):
                file_id = callback_data.replace("file_info_", "")
                await self.show_file_info(update, context, user_id, file_id)
            elif callback_data.startswith("file_download_"):
                file_id = callback_data.replace("file_download_", "")
                await self.download_file(update, context, user_id, file_id)
            elif callback_data.startswith("file_delete_"):
                file_id = callback_data.replace("file_delete_", "")
                await self.delete_file(update, context, user_id, file_id)
            elif callback_data.startswith("confirm_"):
                await self.handle_confirmation(update, context, user_id, callback_data)
            else:
                await query.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback {callback_data}: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def start_system_monitor(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
        query = update.callback_query
        
        if not await self.role_manager.check_permission(user_id, "system", "view"):
            await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            return
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ—Å–ª–∏ –µ—Å—Ç—å
        await self.stop_system_monitor(update, context, user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="system_monitor_stop")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="section_system")]
        ])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        system_status = await self.system_monitor.get_system_status(user_id)
        await query.edit_message_text(
            text=f"{system_status}\n\nüîÑ **–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã**",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.active_monitors[user_id] = True
        asyncio.create_task(self.monitor_system_loop(update, context, user_id))
        
        await query.answer("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
    
    async def stop_system_monitor(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.active_monitors[user_id] = False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        query = update.callback_query
        system_status = await self.system_monitor.get_system_status(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="system_monitor")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="section_system")]
        ])
        
        await query.edit_message_text(
            text=f"{system_status}\n\n‚èπÔ∏è **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        
        await query.answer("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def monitor_system_loop(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–¶–∏–∫–ª –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã"""
        query = update.callback_query
        
        while self.active_monitors.get(user_id, False):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
                system_status = await self.system_monitor.get_system_status(user_id)
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
                from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="system_monitor_stop")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="section_system")]
                ])
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await query.edit_message_text(
                    text=f"{system_status}\n\nüîÑ **–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã**",
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
                
                # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
                await asyncio.sleep(2)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                break
    
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        query = update.callback_query
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞
        if user_id in self.active_monitors:
            self.active_monitors[user_id] = False
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_menu = await self.role_manager.get_user_menu(user_id)
        user_info = await self.role_manager.get_user_info(user_id)
        user_name = user_info["name"] if user_info else "–ì–æ—Å—Ç—å"
        user_role = user_info["role"] if user_info else "guest"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é
        from handlers.menu_buttons import MenuButtons
        keyboard = await MenuButtons.create_main_menu(user_menu)
        
        message_text = f"""ü§ñ **–°–µ–ª–ª–∞ - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_name} ({user_role})

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"""
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    # –†–∞–∑–¥–µ–ª—ã
    async def show_system_section(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª —Å–∏—Å—Ç–µ–º—ã"""
        query = update.callback_query
        
        if not await self.role_manager.check_permission(user_id, "system", "view"):
            await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            return
        
        user_menu = await self.role_manager.get_user_menu(user_id)
        from handlers.menu_buttons import MenuButtons
        keyboard = await MenuButtons.create_system_menu(user_menu)
        
        message_text = """üñ•Ô∏è **–†–∞–∑–¥–µ–ª: –°–∏—Å—Ç–µ–º–∞**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def show_server_section(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª —Å–µ—Ä–≤–µ—Ä–∞"""
        query = update.callback_query
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª
        if user_id in self.active_monitors:
            self.active_monitors[user_id] = False
        
        if not await self.role_manager.check_permission(user_id, "server", "view"):
            await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É")
            return
        
        user_menu = await self.role_manager.get_user_menu(user_id)
        from handlers.menu_buttons import MenuButtons
        keyboard = await MenuButtons.create_server_menu(user_menu)
        
        message_text = """‚õèÔ∏è **–†–∞–∑–¥–µ–ª: –°–µ—Ä–≤–µ—Ä**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def show_storage_section(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        query = update.callback_query
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª
        if user_id in self.active_monitors:
            self.active_monitors[user_id] = False
        
        if not await self.role_manager.check_permission(user_id, "storage", "view"):
            await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É")
            return
        
        user_menu = await self.role_manager.get_user_menu(user_id)
        from handlers.menu_buttons import MenuButtons
        keyboard = await MenuButtons.create_storage_menu(user_menu)
        
        message_text = """‚òÅÔ∏è **–†–∞–∑–¥–µ–ª: –•—Ä–∞–Ω–∏–ª–∏—â–µ**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def show_admin_section(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–∞–∑–¥–µ–ª"""
        query = update.callback_query
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª
        if user_id in self.active_monitors:
            self.active_monitors[user_id] = False
        
        if not await self.role_manager.is_admin(user_id):
            await query.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return
        
        user_menu = await self.role_manager.get_user_menu(user_id)
        from handlers.menu_buttons import MenuButtons
        keyboard = await MenuButtons.create_admin_menu(user_menu)
        
        message_text = """üëë **–†–∞–∑–¥–µ–ª: –ê–¥–º–∏–Ω–∫–∞**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def show_storage_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
        query = update.callback_query
        
        if not await self.role_manager.check_permission(user_id, "storage", "view"):
            await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        is_admin = await self.role_manager.is_admin(user_id)
        files = await self.cloud_storage.list_files(user_id, is_admin)
        storage_usage = await self.cloud_storage.get_storage_usage(user_id)
        
        if not files:
            message_text = "‚òÅÔ∏è **–û–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ**\n\nüìÅ –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        else:
            message_text = "‚òÅÔ∏è **–û–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ**\n\n"
            if storage_usage:
                message_text += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                message_text += f"   –§–∞–π–ª–æ–≤: {storage_usage['total_files']}\n"
                message_text += f"   –†–∞–∑–º–µ—Ä: {storage_usage['total_size_formatted']} / {storage_usage['max_size_formatted']}\n"
                message_text += f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {storage_usage['usage_percent']:.1f}%\n\n"
            
            message_text += "üìÅ **–í–∞—à–∏ —Ñ–∞–π–ª—ã:**\n"
            for file_info in files[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                message_text += f"üìÑ {file_info['original_name']} ({file_info['size_formatted']})\n"
            
            if len(files) > 10:
                message_text += f"\n... –∏ –µ—â–µ {len(files) - 10} —Ñ–∞–π–ª–æ–≤"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —Ñ–∞–π–ª–æ–≤
        from handlers.menu_buttons import MenuButtons
        keyboard = await MenuButtons.create_storage_files_menu(files)
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def show_storage_upload(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤"""
        query = update.callback_query
        
        if not await self.role_manager.check_permission(user_id, "storage", "upload"):
            await query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤")
            return
        
        message_text = """üì§ **–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤**

–ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:

1. **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª** –±–æ—Ç—É (–¥–æ–∫—É–º–µ–Ω—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ)
2. **–§–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏** —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –≤–∞—à–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
3. **–ü–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ** –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã:**
üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã (PDF, DOC, TXT –∏ –¥—Ä.)
üñºÔ∏è –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (JPG, PNG, GIF)
üé• –í–∏–¥–µ–æ (MP4, AVI, MOV)
üéµ –ê—É–¥–∏–æ (MP3, WAV, OGG)
üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 50MB
üíæ –û–±—â–∏–π –ª–∏–º–∏—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: 1GB

**–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:**
‚ùå –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã (.exe, .bat, .cmd)
‚ùå –°–∫—Ä–∏–ø—Ç—ã (.vbs, .js, .com)"""
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìÅ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤", callback_data="storage_list")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="section_storage")]
        ])
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def show_storage_download(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        query = update.callback_query
        
        if not await self.role_manager.check_permission(user_id, "storage", "download"):
            await query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        is_admin = await self.role_manager.is_admin(user_id)
        files = await self.cloud_storage.list_files(user_id, is_admin)
        
        if not files:
            message_text = "üì• **–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤**\n\nüìÅ –£ –≤–∞—Å –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."
        else:
            message_text = "üì• **–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤**\n\n"
            message_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:\n\n"
            
            for i, file_info in enumerate(files[:10], 1):
                message_text += f"{i}. üìÑ **{file_info['original_name']}**\n"
                message_text += f"   üìè {file_info['size_formatted']} | üìÖ {file_info['upload_time'][:19]}\n\n"
            
            if len(files) > 10:
                message_text += f"... –∏ –µ—â–µ {len(files) - 10} —Ñ–∞–π–ª–æ–≤"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        from handlers.menu_buttons import MenuButtons
        keyboard = await MenuButtons.create_storage_download_menu(files)
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def show_storage_delete(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        query = update.callback_query
        
        if not await self.role_manager.check_permission(user_id, "storage", "delete"):
            await query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        is_admin = await self.role_manager.is_admin(user_id)
        files = await self.cloud_storage.list_files(user_id, is_admin)
        
        if not files:
            message_text = "üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤**\n\nüìÅ –£ –≤–∞—Å –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
        else:
            message_text = "üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤**\n\n"
            message_text += "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.\n\n"
            message_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
            
            for i, file_info in enumerate(files[:10], 1):
                message_text += f"{i}. üìÑ **{file_info['original_name']}**\n"
                message_text += f"   üìè {file_info['size_formatted']} | üìÖ {file_info['upload_time'][:19]}\n\n"
            
            if len(files) > 10:
                message_text += f"... –∏ –µ—â–µ {len(files) - 10} —Ñ–∞–π–ª–æ–≤"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        from handlers.menu_buttons import MenuButtons
        keyboard = await MenuButtons.create_storage_delete_menu(files)
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def show_storage_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"""
        query = update.callback_query
        
        if not await self.role_manager.check_permission(user_id, "storage", "view"):
            await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É")
            return
        
        message_text = """üîç **–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤**

–î–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:

1. **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ** —Å —Ç–µ–∫—Å—Ç–æ–º –ø–æ–∏—Å–∫–∞
2. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:** üîç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
3. **–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ:** –ø–æ–∏—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞

**–ü—Ä–∏–º–µ—Ä—ã:**
üîç –¥–æ–∫—É–º–µ–Ω—Ç
üîç —Ñ–æ—Ç–æ
–ø–æ–∏—Å–∫ –æ—Ç—á–µ—Ç
üîç .pdf

**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞** –ø–æ–∫–∞–∂—É—Ç –≤—Å–µ —Ñ–∞–π–ª—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏."""
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìÅ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤", callback_data="storage_list")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="section_storage")]
        ])
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def show_admin_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω–∫–∞)"""
        query = update.callback_query
        
        if not await self.role_manager.is_admin(user_id):
            await query.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return
        
        users = await self.role_manager.list_users(user_id)
        
        if not users:
            message_text = "üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏**\n\n–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç."
        else:
            message_text = "üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏**\n\n"
            for user in users:
                message_text += f"üë§ **{user['name']}** (ID: {user['id']})\n"
                message_text += f"   –†–æ–ª—å: {user['role']}\n"
                message_text += f"   –°–æ–∑–¥–∞–Ω: {user['created_at']}\n\n"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é
        from handlers.menu_buttons import MenuButtons
        keyboard = await MenuButtons.create_admin_menu({"admin": ["users"]})
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def show_file_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, file_id: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ"""
        query = update.callback_query
        
        if not await self.role_manager.check_permission(user_id, "storage", "view"):
            await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É")
            return
        
        file_info = await self.cloud_storage.get_file_info(file_id, user_id)
        
        if not file_info:
            await query.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–º
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard_buttons = []
        if await self.role_manager.check_permission(user_id, "storage", "download"):
            keyboard_buttons.append(InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å", callback_data=f"file_download_{file_id}"))
        
        if await self.role_manager.check_permission(user_id, "storage", "delete"):
            keyboard_buttons.append(InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"file_delete_{file_id}"))
        
        keyboard_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="storage_list"))
        
        keyboard = InlineKeyboardMarkup([keyboard_buttons])
        
        message_text = f"""üìÑ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ**

üìõ **–ò–º—è:** {file_info['name']}
üìè **–†–∞–∑–º–µ—Ä:** {file_info['size_formatted']}
üìÅ **–¢–∏–ø:** {file_info['extension']}
üìÖ **–ó–∞–≥—Ä—É–∂–µ–Ω:** {file_info['upload_time']}"""

        await query.edit_message_text(
            text=message_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def handle_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –¥–µ–π—Å—Ç–≤–∏–π"""
        query = update.callback_query
        
        # –ü–∞—Ä—Å–∏–Ω–≥ callback_data
        parts = callback_data.split("_")
        if len(parts) < 2:
            await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
            return
        
        action = parts[1]
        item_id = parts[2] if len(parts) > 2 else None
        
        if action == "delete" and item_id:
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            if await self.role_manager.check_permission(user_id, "storage", "delete"):
                result = await self.cloud_storage.delete_file(item_id, user_id)
                if result["success"]:
                    await query.answer("‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω")
                    await self.show_storage_list(update, context, user_id)
                else:
                    await query.answer(f"‚ùå {result['message']}")
            else:
                await query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        else:
            await query.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    async def refresh_current_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ–Ω—é –∏ –µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await self.show_main_menu(update, context, user_id)
    
    async def close_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é"""
        query = update.callback_query
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏
        for user_id in list(self.active_monitors.keys()):
            self.active_monitors[user_id] = False
        
        await query.edit_message_text("üëã –ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ")
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    async def show_system_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        query = update.callback_query
        await query.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        await self.show_system_section(update, context, user_id)
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º
    async def show_server_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"""
        query = update.callback_query
        await query.answer("‚õèÔ∏è –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        await self.show_server_section(update, context, user_id)
    
    async def start_server(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"""
        query = update.callback_query
        await query.answer("üü¢ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        await self.show_server_section(update, context, user_id)
    
    async def stop_server(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"""
        query = update.callback_query
        await query.answer("üî¥ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        await self.show_server_section(update, context, user_id)
    
    async def create_server_backup(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø —Å–µ—Ä–≤–µ—Ä–∞"""
        query = update.callback_query
        await query.answer("üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        await self.show_server_section(update, context, user_id)
    
    # –•—Ä–∞–Ω–∏–ª–∏—â–µ
    async def download_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, file_id: str):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        query = update.callback_query
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_info = await self.cloud_storage.get_file_info(file_id, user_id)
            if not file_info:
                await query.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(file_info["path"]):
                await query.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await query.answer("üì• –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")
            
            with open(file_info["path"], 'rb') as file:
                await context.bot.send_document(
                    chat_id=user_id,
                    document=file,
                    filename=file_info["original_name"],
                    caption=f"üìÑ {file_info['original_name']}\nüìè {file_info['size_formatted']}\nüìÖ {file_info['upload_time'][:19]}"
                )
            
            await query.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞")
    
    async def delete_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, file_id: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        query = update.callback_query
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_info = await self.cloud_storage.get_file_info(file_id, user_id)
            if not file_info:
                await query.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
                return
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
            result = await self.cloud_storage.delete_file(file_id, user_id)
            
            if result["success"]:
                await query.answer("‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
                await self.show_storage_list(update, context, user_id)
            else:
                await query.answer(f"‚ùå {result['message']}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
    
    async def handle_file_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ñ–∞–π–ª–∞–º–∏"""
        try:
            # –ü–∞—Ä—Å–∏–º callback_data
            parts = callback_data.split("_")
            if len(parts) < 3:
                await update.callback_query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
                return
            
            action = parts[1]
            file_id = parts[2]
            
            if action == "download":
                await self.download_file(update, context, user_id, file_id)
            elif action == "delete":
                await self.delete_file(update, context, user_id, file_id)
            elif action == "info":
                await self.show_file_info(update, context, user_id, file_id)
            else:
                await update.callback_query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å —Ñ–∞–π–ª–æ–º: {e}")
            await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    async def show_notifications_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        query = update.callback_query
        await query.answer("‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        await self.show_system_section(update, context, user_id)
    
    # –ê–¥–º–∏–Ω–∫–∞
    async def show_admin_permissions(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏"""
        query = update.callback_query
        await query.answer("üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        await self.show_admin_section(update, context, user_id)
    
    async def show_admin_logs(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"""
        query = update.callback_query
        await query.answer("üìù –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        await self.show_admin_section(update, context, user_id)
    
    async def show_admin_config(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∫–∏"""
        query = update.callback_query
        await query.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    # –ú–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    async def show_analytics_dashboard(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        query = update.callback_query
        
        if not await self.role_manager.check_permission(user_id, "system", "view"):
            await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ")
            return
        
        if not self.analytics:
            await query.answer("‚ùå –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìä –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="analytics_summary")],
            [InlineKeyboardButton("ü§ñ –°–æ–±—ã—Ç–∏—è –±–æ—Ç–∞", callback_data="analytics_bot_events")],
            [InlineKeyboardButton("üë• –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="analytics_users")],
            [InlineKeyboardButton("üìà –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="analytics_full_report")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="section_system")]
        ])
        
        await query.edit_message_text(
            text="üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def create_system_summary(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        query = update.callback_query
        
        if not self.analytics:
            await query.answer("‚ùå –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        await query.answer("üìä –ü–æ–ª—É—á–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
        
        try:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.analytics.record_system_stats()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
            summary = self.analytics.get_system_summary()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="analytics_summary")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_dashboard")]
            ])
            
            await query.edit_message_text(
                text=summary,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
    
    async def show_bot_events(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –±–æ—Ç–∞"""
        query = update.callback_query
        
        if not self.analytics:
            await query.answer("‚ùå –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        await query.answer("ü§ñ –ü–æ–ª—É—á–∞—é —Å–æ–±—ã—Ç–∏—è –±–æ—Ç–∞...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
            events_summary = self.analytics.get_bot_events_summary(hours=24)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="analytics_bot_events")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_dashboard")]
            ])
            
            await query.edit_message_text(
                text=events_summary,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π –±–æ—Ç–∞: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π")
    
    async def show_user_activity(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        query = update.callback_query
        
        if not self.analytics:
            await query.answer("‚ùå –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        await query.answer("üë• –ü–æ–ª—É—á–∞—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            activity_summary = self.analytics.get_user_activity_summary()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="analytics_users")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_dashboard")]
            ])
            
            await query.edit_message_text(
                text=activity_summary,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    
    async def show_full_report(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        query = update.callback_query
        
        if not self.analytics:
            await query.answer("‚ùå –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        await query.answer("üìà –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç...")
        
        try:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.analytics.record_system_stats()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
            full_report = self.analytics.get_performance_report()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="analytics_full_report")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_dashboard")]
            ])
            
            await query.edit_message_text(
                text=full_report,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞")
    
    # –ú–µ—Ç–æ–¥—ã —Å–µ—Ä–≤–µ—Ä–∞
    async def restart_bot(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
        query = update.callback_query
        
        if not await self.role_manager.check_permission(user_id, "admin", "manage"):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞")
            return
        
        try:
            await query.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="server_restart_confirm")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="server_status")]
            ])
            
            await query.edit_message_text(
                "‚ö†Ô∏è **–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞**\n\n"
                "–ë–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.\n"
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def confirm_restart(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
        query = update.callback_query
        
        try:
            await query.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
            
            await query.edit_message_text(
                "üîÑ **–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞**\n\n"
                "–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /start —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            import asyncio
            asyncio.create_task(self.perform_restart())
            
        except Exception as e:
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def perform_restart(self):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
            await asyncio.sleep(2)
            
            # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            import os
            import sys
            python = sys.executable
            os.execl(python, python, *sys.argv)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")

    async def show_processes(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã Python"""
        query = update.callback_query
        
        if not await self.role_manager.check_permission(user_id, "admin", "view"):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
            return
        
        try:
            await query.answer("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
            
            import psutil
            
            # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python
            python_processes = []
            for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'memory_info']):
                try:
                    if 'python' in proc.info['name'].lower():
                        memory_mb = proc.info['memory_info'].rss / 1024 / 1024
                        python_processes.append({
                            'pid': proc.info['pid'],
                            'name': proc.info['name'],
                            'cmdline': ' '.join(proc.info['cmdline'][:3]) if proc.info['cmdline'] else '',
                            'memory': memory_mb
                        })
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
            
            if python_processes:
                # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø–∞–º—è—Ç–∏
                python_processes.sort(key=lambda x: x['memory'], reverse=True)
                
                processes_text = "üêç **–ü—Ä–æ—Ü–µ—Å—Å—ã Python**\n\n"
                for i, proc in enumerate(python_processes[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø 10
                    processes_text += f"{i}. **PID {proc['pid']}**\n"
                    processes_text += f"   –ü–∞–º—è—Ç—å: {proc['memory']:.1f} –ú–ë\n"
                    processes_text += f"   –ö–æ–º–∞–Ω–¥–∞: {proc['cmdline'][:50]}...\n\n"
            else:
                processes_text = "üêç **–ü—Ä–æ—Ü–µ—Å—Å—ã Python**\n\n–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Python."
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="server_processes")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="server_status")]
            ])
            
            await query.edit_message_text(
                processes_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def create_backup(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö"""
        query = update.callback_query
        
        if not await self.role_manager.check_permission(user_id, "admin", "manage"):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞")
            return
        
        try:
            await query.answer("üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞...")
            
            import os
            from datetime import datetime
            import tarfile
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            backup_dir = "storage/backups"
            os.makedirs(backup_dir, exist_ok=True)
            
            # –ò–º—è —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞
            timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
            backup_name = f"backup_{timestamp}.tar.gz"
            backup_path = os.path.join(backup_dir, backup_name)
            
            # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
            with tarfile.open(backup_path, "w:gz") as tar:
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –±—ç–∫–∞–ø–∞
                folders_to_backup = ["storage", "logs", "config.json"]
                for folder in folders_to_backup:
                    if os.path.exists(folder):
                        tar.add(folder, arcname=os.path.basename(folder))
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(backup_path) / 1024 / 1024  # –ú–ë
            
            backup_text = f"""
üíæ **–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω!**

**–§–∞–π–ª:** {backup_name}
**–†–∞–∑–º–µ—Ä:** {file_size:.2f} –ú–ë
**–ü—É—Ç—å:** {backup_path}
**–í—Ä–µ–º—è:** {datetime.now().strftime("%d.%m.%Y %H:%M:%S")}

‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!
            """
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìÅ –°–∫–∞—á–∞—Ç—å –±—ç–∫–∞–ø", callback_data=f"backup_download_{backup_name}")],
                [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –±—ç–∫–∞–ø", callback_data=f"backup_delete_{backup_name}")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="server_status")]
            ])
            
            await query.edit_message_text(
                backup_text.strip(),
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {str(e)}")

    async def download_backup(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, backup_name: str):
        """–°–∫–∞—á–∞—Ç—å –±—ç–∫–∞–ø"""
        query = update.callback_query
        
        try:
            await query.answer("üìÅ –û—Ç–ø—Ä–∞–≤–∫–∞ –±—ç–∫–∞–ø–∞...")
            
            import os
            backup_path = os.path.join("storage/backups", backup_name)
            
            if os.path.exists(backup_path):
                with open(backup_path, 'rb') as f:
                    await context.bot.send_document(
                        chat_id=user_id,
                        document=f,
                        filename=backup_name,
                        caption=f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_name}"
                    )
                await query.answer("‚úÖ –ë—ç–∫–∞–ø –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç")
            else:
                await query.answer("‚ùå –§–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def delete_backup(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, backup_name: str):
        """–£–¥–∞–ª–∏—Ç—å –±—ç–∫–∞–ø"""
        query = update.callback_query
        
        try:
            import os
            backup_path = os.path.join("storage/backups", backup_name)
            
            if os.path.exists(backup_path):
                os.remove(backup_path)
                await query.answer("‚úÖ –ë—ç–∫–∞–ø —É–¥–∞–ª–µ–Ω")
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞—Ç—É—Å—É —Å–µ—Ä–≤–µ—Ä–∞
                from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="server_status")]
                ])
                
                await query.edit_message_text(
                    f"‚úÖ **–ë—ç–∫–∞–ø —É–¥–∞–ª–µ–Ω!**\n\n–§–∞–π–ª {backup_name} –±—ã–ª —É–¥–∞–ª–µ–Ω.",
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
            else:
                await query.answer("‚ùå –§–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    # –ú–µ—Ç–æ–¥—ã –∞–¥–º–∏–Ω–∫–∏
    async def add_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        
        if not await self.role_manager.check_permission(user_id, "admin", "manage"):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        
        try:
            await query.answer("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_add_user_id")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]
            ])
            
            await query.edit_message_text(
                "‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
                "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                "1. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /start\n"
                "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ Telegram ID\n"
                "3. –í–≤–µ–¥–∏—Ç–µ ID –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å\n\n"
                "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–≤–æ–¥–∞ ID:",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def show_add_user_form(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        
        try:
            await query.answer("üìù –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è...")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
            context.user_data['adding_user'] = True
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ä–æ–ª—è–º–∏
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", callback_data="admin_role_user")],
                [InlineKeyboardButton("üîß –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", callback_data="admin_role_moderator")],
                [InlineKeyboardButton("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data="admin_role_admin")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_users")]
            ])
            
            await query.edit_message_text(
                "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
                "–ó–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
                "**–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å Telegram ID:**\n"
                "1. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É @userinfobot\n"
                "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ ID –∏–∑ –æ—Ç–≤–µ—Ç–∞\n"
                "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –º–Ω–µ",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def set_user_role(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏–∑ callback_data
            role = query.data.replace("admin_role_", "")
            role_names = {
                "user": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                "moderator": "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", 
                "admin": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
            }
            
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            new_user_id = context.user_data.get('new_user_id')
            if not new_user_id:
                await query.answer("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success = await self.role_manager.add_user(
                user_id=new_user_id,
                name=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_user_id}",
                role=role,
                added_by=user_id
            )
            
            if success:
                await query.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ä–æ–ª—å—é '{role_names[role]}'")
                
                # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context.user_data.pop('adding_user', None)
                context.user_data.pop('new_user_id', None)
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_add_user")],
                    [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="admin_users")]
                ])
                
                await query.edit_message_text(
                    f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n"
                    f"**ID:** {new_user_id}\n"
                    f"**–†–æ–ª—å:** {role_names[role]}\n\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.",
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                
        except Exception as e:
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def delete_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        
        if not await self.role_manager.check_permission(user_id, "admin", "manage"):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        
        try:
            await query.answer("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
            users = await self.role_manager.list_users(user_id)
            
            if not users:
                await query.edit_message_text(
                    "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]
                    ])
                )
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = []
            for user in users:
                if user['id'] != user_id:  # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è
                    keyboard.append([
                        InlineKeyboardButton(
                            f"üóëÔ∏è {user['name']} ({user['role']})", 
                            callback_data=f"admin_delete_confirm_{user['id']}"
                        )
                    ])
            
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")])
            
            await query.edit_message_text(
                "üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
                "(–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è)",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        except Exception as e:
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def confirm_delete_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
            target_user_id = int(query.data.replace("admin_delete_confirm_", ""))
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = await self.role_manager.get_user_info(target_user_id)
            
            if not user_info:
                await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"admin_delete_final_{target_user_id}")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_delete_user")]
            ])
            
            await query.edit_message_text(
                f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
                f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
                f"**{user_info['name']}** (ID: {target_user_id})\n"
                f"–†–æ–ª—å: {user_info['role']}\n\n"
                f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def final_delete_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        query = update.callback_query
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
            target_user_id = int(query.data.replace("admin_delete_final_", ""))
            
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success = await self.role_manager.remove_user(target_user_id, user_id)
            
            if success:
                await query.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω")
                
                from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="admin_users")]
                ])
                
                await query.edit_message_text(
                    f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!**\n\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.",
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                
        except Exception as e:
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def show_logs(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –±–æ—Ç–∞"""
        query = update.callback_query
        
        if not await self.role_manager.check_permission(user_id, "admin", "view"):
            await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤.")
            return
        
        try:
            await query.answer("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤...")
            
            # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–æ–≥ —Ñ–∞–π–ª–∞
            log_file = "logs/sella_bot.log"
            try:
                with open(log_file, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
                    last_lines = lines[-20:] if len(lines) > 20 else lines  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫
                    log_content = ''.join(last_lines)
            except FileNotFoundError:
                log_content = "–õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."
            except Exception as e:
                log_content = f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {str(e)}"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏", callback_data="admin_logs")],
                [InlineKeyboardButton("üìÅ –ü–æ–ª–Ω—ã–π –ª–æ–≥", callback_data="admin_full_log")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]
            ])
            
            await query.edit_message_text(
                f"üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –±–æ—Ç–∞**\n\n"
                f"```\n{log_content[-3000:]}\n```\n\n"
                f"–ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {len(last_lines) if 'last_lines' in locals() else 0} —Å—Ç—Ä–æ–∫",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def show_full_log(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –ª–æ–≥"""
        query = update.callback_query
        
        try:
            await query.answer("üìÅ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ª–æ–≥–∞...")
            
            # –ß–∏—Ç–∞–µ–º –≤–µ—Å—å –ª–æ–≥ —Ñ–∞–π–ª
            log_file = "logs/sella_bot.log"
            try:
                with open(log_file, 'r', encoding='utf-8') as f:
                    log_content = f.read()
            except FileNotFoundError:
                log_content = "–õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."
            except Exception as e:
                log_content = f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {str(e)}"
            
            # –ï—Å–ª–∏ –ª–æ–≥ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
            if len(log_content) > 4000:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                import tempfile
                with tempfile.NamedTemporaryFile(mode='w', suffix='.log', delete=False, encoding='utf-8') as f:
                    f.write(log_content)
                    temp_file = f.name
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                with open(temp_file, 'rb') as f:
                    await context.bot.send_document(
                        chat_id=user_id,
                        document=f,
                        filename="sella_bot_full.log",
                        caption="üìÅ –ü–æ–ª–Ω—ã–π –ª–æ–≥ –±–æ—Ç–∞"
                    )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                import os
                os.unlink(temp_file)
                
                await query.answer("üìÅ –ü–æ–ª–Ω—ã–π –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç")
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
                from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_logs")]
                ])
                
                await query.edit_message_text(
                    f"üìÅ **–ü–æ–ª–Ω—ã–π –ª–æ–≥ –±–æ—Ç–∞**\n\n"
                    f"```\n{log_content}\n```",
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
            
        except Exception as e:
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}") 

    async def show_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –±–æ—Ç—É"""
        query = update.callback_query
        
        try:
            await query.answer("‚ÑπÔ∏è –û—Ç–∫—Ä—ã–≤–∞—é —Å–ø—Ä–∞–≤–∫—É...")
            
            help_text = """
ü§ñ **–°–µ–ª–ª–∞ - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±–æ—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä**

## üìã –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
‚Ä¢ `/start` - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/help` - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
‚Ä¢ `/menu` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ `/status` - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã

## üñ•Ô∏è –†–∞–∑–¥–µ–ª—ã –±–æ—Ç–∞

### üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
‚Ä¢ –°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (CPU, –ø–∞–º—è—Ç—å, –¥–∏—Å–∫)
‚Ä¢ –°–æ–±—ã—Ç–∏—è –±–æ—Ç–∞
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏

### üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞
‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

### ‚öôÔ∏è –°–µ—Ä–≤–µ—Ä
‚Ä¢ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Python
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π

### üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤
‚Ä¢ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
‚Ä¢ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
‚Ä¢ –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤
‚Ä¢ –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤

### üë§ –ê–¥–º–∏–Ω–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏

## üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

### –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
1. –û—Ç–∫—Ä–æ–π—Ç–µ —Ä–∞–∑–¥–µ–ª **üë§ –ê–¥–º–∏–Ω–∫–∞**
2. –ù–∞–∂–º–∏—Ç–µ **"‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"**
3. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É @userinfobot
4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ Telegram ID
5. –í–≤–µ–¥–∏—Ç–µ ID –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å

### –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
‚Ä¢ **üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å** - –±–∞–∑–æ–≤—ã–π –¥–æ—Å—Ç—É–ø
‚Ä¢ **üîß –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä** - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞
‚Ä¢ **üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä** - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø

## üõ†Ô∏è –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º

### –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ `config.json`
2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª **‚öôÔ∏è –°–µ—Ä–≤–µ—Ä**
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ **üë§ –ê–¥–º–∏–Ω–∫–∞**

### –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º:
1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à ID –¥–æ–±–∞–≤–ª–µ–Ω –≤ `admin_ids`
2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —É –≤–∞—Å —Ä–æ–ª—å "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"

## üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø–æ–º–æ—â–∏:
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª `BOT_SETUP_GUIDE.md`
‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É

---
**–í–µ—Ä—Å–∏—è:** 2.0 (Termux)
**–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:** Android/Termux
            """
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="help_setup_guide")],
                [InlineKeyboardButton("üîß –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º", callback_data="help_troubleshooting")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
            ])
            
            await query.edit_message_text(
                help_text.strip(),
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def show_setup_guide(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
        query = update.callback_query
        
        try:
            await query.answer("üìñ –û—Ç–∫—Ä—ã–≤–∞—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é...")
            
            setup_text = """
üìñ **–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ**

## üÜï –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –≤ Telegram

### –®–∞–≥ 1: –ù–∞–π—Ç–∏ BotFather
1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram
2. –ù–∞–π–¥–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è **@BotFather**
3. –ù–∞–∂–º–∏—Ç–µ **"Start"** –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `/start`

### –®–∞–≥ 2: –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞
1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `/newbot`
2. –í–≤–µ–¥–∏—Ç–µ **–∏–º—è –±–æ—Ç–∞** (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–°–µ–ª–ª–∞ - –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä")
3. –í–≤–µ–¥–∏—Ç–µ **username –±–æ—Ç–∞** (–Ω–∞–ø—Ä–∏–º–µ—Ä: "sella_manager_bot")
   - –î–æ–ª–∂–µ–Ω –∑–∞–∫–∞–Ω—á–∏–≤–∞—Ç—å—Å—è –Ω–∞ `bot`
   - –ú–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
   - –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º

### –®–∞–≥ 3: –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω
BotFather –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–æ–∫–µ–Ω–æ–º:
```
Use this token to access the HTTP API:
1234567890:ABCdefGHIjklMNOpqrsTUVwxyz
```

**‚ö†Ô∏è –í–ê–ñ–ù–û:** –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω!

## ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

### –®–∞–≥ 1: –û—Ç–∫—Ä—ã—Ç—å config.json
–û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª `config.json` –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞

### –®–∞–≥ 2: –í—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
–ó–∞–º–µ–Ω–∏—Ç–µ `"–í–ê–®_–¢–û–ö–ï–ù_–ó–î–ï–°–¨"` –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

### –®–∞–≥ 3: –£–∫–∞–∑–∞—Ç—å ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
–ó–∞–º–µ–Ω–∏—Ç–µ `–í–ê–®_TELEGRAM_ID` –Ω–∞ –≤–∞—à Telegram ID

**–ö–∞–∫ —É–∑–Ω–∞—Ç—å —Å–≤–æ–π Telegram ID:**
1. –ù–∞–π–¥–∏—Ç–µ –±–æ—Ç–∞ @userinfobot –≤ Telegram
2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–º—É –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
3. –û–Ω –æ—Ç–≤–µ—Ç–∏—Ç –≤–∞—à–∏–º ID

## üì± –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ Termux

### –®–∞–≥ 1: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Termux
1. –°–∫–∞—á–∞–π—Ç–µ Termux —Å F-Droid (–ù–ï –∏–∑ Google Play!)
2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
3. –û—Ç–∫—Ä–æ–π—Ç–µ Termux

### –®–∞–≥ 2: –û–±–Ω–æ–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
```bash
pkg update -y && pkg upgrade -y
```

### –®–∞–≥ 3: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã
```bash
pkg install python python-pip git -y
```

### –®–∞–≥ 4: –ö–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
```bash
git clone <URL_–í–ê–®–ï–ì–û_–†–ï–ü–û–ó–ò–¢–û–†–ò–Ø>
cd <–ü–ê–ü–ö–ê_–ü–†–û–ï–ö–¢–ê>
```

### –®–∞–≥ 5: –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É
```bash
chmod +x start_termux.sh
./start_termux.sh
```

## üöÄ –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫

### –®–∞–≥ 1: –ù–∞–π—Ç–∏ –±–æ—Ç–∞
1. –û—Ç–∫—Ä–æ–π—Ç–µ Telegram
2. –ù–∞–π–¥–∏—Ç–µ –≤–∞—à–µ–≥–æ –±–æ—Ç–∞ –ø–æ username
3. –ù–∞–∂–º–∏—Ç–µ **"Start"** –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ `/start`

### –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É
–ë–æ—Ç –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—Ç–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º

### –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–µ–Ω—é
–î–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –∫–Ω–æ–ø–∫–∏ –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤

---
**–ü–æ–¥—Ä–æ–±–Ω–µ–µ:** –°–º. —Ñ–∞–π–ª `BOT_SETUP_GUIDE.md`
            """
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîß –£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º", callback_data="help_troubleshooting")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø—Ä–∞–≤–∫–µ", callback_data="help")]
            ])
            
            await query.edit_message_text(
                setup_text.strip(),
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def show_troubleshooting(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º"""
        query = update.callback_query
        
        try:
            await query.answer("üîß –û—Ç–∫—Ä—ã–≤–∞—é —Ä–∞–∑–¥–µ–ª –ø—Ä–æ–±–ª–µ–º...")
            
            troubleshooting_text = """
üîß **–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º**

## ‚ùå –ë–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç

### –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
1. **–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω** –≤ `config.json`
2. **–ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è**
3. **–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**

### –†–µ—à–µ–Ω–∏–µ:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ `config.json`
2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞:
   ```bash
   python main.py
   ```
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ **üë§ –ê–¥–º–∏–Ω–∫–∞**

## ‚ùå –û—à–∏–±–∫–∞ "Module not found"

### –†–µ—à–µ–Ω–∏–µ:
```bash
source venv/bin/activate
pip install -r requirements_termux.txt
```

## ‚ùå –û—à–∏–±–∫–∞ "Permission denied"

### –†–µ—à–µ–Ω–∏–µ:
```bash
chmod +x start_termux.sh
```

## ‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è

### –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:
1. **–õ–æ–≥–∏:**
   ```bash
   tail -f logs/sella_bot.log
   ```

2. **–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:**
   ```bash
   python -c "import json; print(json.load(open('config.json')))"
   ```

## ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º

### –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:
1. –í–∞—à ID –¥–æ–±–∞–≤–ª–µ–Ω –≤ `admin_ids` –≤ `config.json`
2. –£ –≤–∞—Å —Ä–æ–ª—å "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"

### –ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –∞–¥–º–∏–Ω—ã:
1. –û—Ç–∫—Ä–æ–π—Ç–µ `config.json`
2. –ù–∞–π–¥–∏—Ç–µ —Å—Ç—Ä–æ–∫—É `"admin_ids": [–í–ê–®_ID]`
3. –ó–∞–º–µ–Ω–∏—Ç–µ `–í–ê–®_ID` –Ω–∞ –≤–∞—à Telegram ID

## ‚ùå –û—à–∏–±–∫–∏ –≤ Termux

### –ü—Ä–æ–±–ª–µ–º–∞: "No space left"
```bash
pkg clean
rm -rf ~/.cache/pip
```

### –ü—Ä–æ–±–ª–µ–º–∞: "Package not found"
```bash
pkg update -y
pkg install python python-pip -y
```

## üîÑ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –≤ Termux

–î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ:
```bash
# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å cronie
pkg install cronie -y

# –û—Ç–∫—Ä—ã—Ç—å crontab
crontab -e

# –î–æ–±–∞–≤–∏—Ç—å —Å—Ç—Ä–æ–∫—É
@reboot cd /path/to/bot && ./start_termux.sh
```

## üìû –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–º–æ—â—å

### –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
- `/start` - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
- `/help` - —Å–ø—Ä–∞–≤–∫–∞
- `/status` - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
- `/menu` - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

### –õ–æ–≥–∏ –∏ –æ—Ç–ª–∞–¥–∫–∞:
- –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ `logs/sella_bot.log`
- –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: `tail -f logs/sella_bot.log`
- –î–ª—è –æ—á–∏—Å—Ç–∫–∏: `> logs/sella_bot.log`

---
**–ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–µ —Ä–µ—à–µ–Ω–∞:** –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            """
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ", callback_data="help_setup_guide")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø—Ä–∞–≤–∫–µ", callback_data="help")]
            ])
            
            await query.edit_message_text(
                troubleshooting_text.strip(),
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}") 