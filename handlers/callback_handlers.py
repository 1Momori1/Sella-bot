from telegram import Update
from telegram.ext import ContextTypes
from typing import Dict, Any
import logging
import asyncio
import os

logger = logging.getLogger(__name__)

class CallbackHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫"""
    
    def __init__(self, role_manager, system_monitor, process_manager, cloud_storage, notification_manager, analytics=None):
        self.role_manager = role_manager
        self.system_monitor = system_monitor
        self.process_manager = process_manager
        self.cloud_storage = cloud_storage
        self.notification_manager = notification_manager
        self.analytics = analytics
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–≤
        self.active_monitors = {}
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        if not query or not query.from_user or not query.data:
            return
        
        user_id = query.from_user.id
        callback_data = query.data
        
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ callback
            if callback_data == "main_menu":
                await self.show_main_menu(update, context, user_id)
            # –†–∞–∑–¥–µ–ª—ã
            elif callback_data == "section_system":
                await self.show_system_section(update, context, user_id)
            elif callback_data == "section_server":
                await self.show_server_section(update, context, user_id)
            elif callback_data == "section_storage":
                await self.show_storage_section(update, context, user_id)
            elif callback_data == "section_admin":
                await self.show_admin_section(update, context, user_id)
            # –°–∏—Å—Ç–µ–º–∞
            elif callback_data == "system_monitor":
                await self.start_system_monitor(update, context, user_id)
            elif callback_data == "system_monitor_stop":
                await self.stop_system_monitor(update, context, user_id)
            elif callback_data == "system_settings":
                await self.show_system_settings(update, context, user_id)
            elif callback_data == "notifications_settings":
                await self.show_notifications_settings(update, context, user_id)
            # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
            elif callback_data == "analytics_dashboard":
                await self.show_analytics_dashboard(update, context, user_id)
            elif callback_data == "analytics_cpu_memory":
                await self.create_cpu_memory_chart(update, context, user_id)
            elif callback_data == "analytics_disk":
                await self.create_disk_chart(update, context, user_id)
            elif callback_data == "analytics_network":
                await self.create_network_chart(update, context, user_id)
            elif callback_data == "analytics_processes":
                await self.create_processes_chart(update, context, user_id)
            elif callback_data == "analytics_summary":
                await self.create_system_summary(update, context, user_id)
            elif callback_data == "analytics_collect_data":
                await self.start_data_collection(update, context, user_id)
            # –°–µ—Ä–≤–µ—Ä
            elif callback_data == "server_status":
                await self.show_server_status(update, context, user_id)
            elif callback_data == "server_start":
                await self.start_server(update, context, user_id)
            elif callback_data == "server_stop":
                await self.stop_server(update, context, user_id)
            elif callback_data == "server_backup":
                await self.create_server_backup(update, context, user_id)
            # –•—Ä–∞–Ω–∏–ª–∏—â–µ
            elif callback_data == "storage_list":
                await self.show_storage_list(update, context, user_id)
            elif callback_data == "storage_upload":
                await self.show_storage_upload(update, context, user_id)
            elif callback_data == "storage_download":
                await self.show_storage_download(update, context, user_id)
            elif callback_data == "storage_delete":
                await self.show_storage_delete(update, context, user_id)
            elif callback_data == "storage_search":
                await self.show_storage_search(update, context, user_id)
            elif callback_data == "storage_refresh":
                await self.show_storage_list(update, context, user_id)
            # –ê–¥–º–∏–Ω–∫–∞
            elif callback_data == "admin_users":
                await self.show_admin_users(update, context, user_id)
            elif callback_data == "admin_permissions":
                await self.show_admin_permissions(update, context, user_id)
            elif callback_data == "admin_logs":
                await self.show_admin_logs(update, context, user_id)
            elif callback_data == "admin_config":
                await self.show_admin_config(update, context, user_id)
            # –û–±—â–∏–µ
            elif callback_data == "refresh":
                await self.refresh_current_menu(update, context, user_id)
            elif callback_data == "close":
                await self.close_menu(update, context)
            elif callback_data == "no_action":
                await query.answer()  # –ü—Ä–æ—Å—Ç–æ —É–±–∏—Ä–∞–µ–º —á–∞—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏
            elif callback_data == "cancel":
                await self.show_main_menu(update, context, user_id)
            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            elif callback_data.startswith("file_info_"):
                file_id = callback_data.replace("file_info_", "")
                await self.show_file_info(update, context, user_id, file_id)
            elif callback_data.startswith("file_download_"):
                file_id = callback_data.replace("file_download_", "")
                await self.download_file(update, context, user_id, file_id)
            elif callback_data.startswith("file_delete_"):
                file_id = callback_data.replace("file_delete_", "")
                await self.delete_file(update, context, user_id, file_id)
            elif callback_data.startswith("confirm_"):
                await self.handle_confirmation(update, context, user_id, callback_data)
            else:
                await query.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback {callback_data}: {e}")
            await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    async def start_system_monitor(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
        query = update.callback_query
        
        if not await self.role_manager.check_permission(user_id, "system", "view"):
            await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            return
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ—Å–ª–∏ –µ—Å—Ç—å
        await self.stop_system_monitor(update, context, user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="system_monitor_stop")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="section_system")]
        ])
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        system_status = await self.system_monitor.get_system_status(user_id)
        await query.edit_message_text(
            text=f"{system_status}\n\nüîÑ **–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã**",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.active_monitors[user_id] = True
        asyncio.create_task(self.monitor_system_loop(update, context, user_id))
        
        await query.answer("üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
    
    async def stop_system_monitor(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã"""
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.active_monitors[user_id] = False
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        query = update.callback_query
        system_status = await self.system_monitor.get_system_status(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="system_monitor")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="section_system")]
        ])
        
        await query.edit_message_text(
            text=f"{system_status}\n\n‚èπÔ∏è **–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        
        await query.answer("‚èπÔ∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def monitor_system_loop(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–¶–∏–∫–ª –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã"""
        query = update.callback_query
        
        while self.active_monitors.get(user_id, False):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
                system_status = await self.system_monitor.get_system_status(user_id)
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
                from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", callback_data="system_monitor_stop")],
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="section_system")]
                ])
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await query.edit_message_text(
                    text=f"{system_status}\n\nüîÑ **–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã**",
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
                
                # –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã
                await asyncio.sleep(2)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
                break
    
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        query = update.callback_query
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Ä–∞–∑–¥–µ–ª–∞
        if user_id in self.active_monitors:
            self.active_monitors[user_id] = False
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_menu = await self.role_manager.get_user_menu(user_id)
        user_info = await self.role_manager.get_user_info(user_id)
        user_name = user_info["name"] if user_info else "–ì–æ—Å—Ç—å"
        user_role = user_info["role"] if user_info else "guest"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é
        from handlers.menu_buttons import MenuButtons
        keyboard = await MenuButtons.create_main_menu(user_menu)
        
        message_text = f"""ü§ñ **–°–µ–ª–ª–∞ - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_name} ({user_role})

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"""
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    # –†–∞–∑–¥–µ–ª—ã
    async def show_system_section(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª —Å–∏—Å—Ç–µ–º—ã"""
        query = update.callback_query
        
        if not await self.role_manager.check_permission(user_id, "system", "view"):
            await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
            return
        
        user_menu = await self.role_manager.get_user_menu(user_id)
        from handlers.menu_buttons import MenuButtons
        keyboard = await MenuButtons.create_system_menu(user_menu)
        
        message_text = """üñ•Ô∏è **–†–∞–∑–¥–µ–ª: –°–∏—Å—Ç–µ–º–∞**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def show_server_section(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª —Å–µ—Ä–≤–µ—Ä–∞"""
        query = update.callback_query
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª
        if user_id in self.active_monitors:
            self.active_monitors[user_id] = False
        
        if not await self.role_manager.check_permission(user_id, "server", "view"):
            await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É")
            return
        
        user_menu = await self.role_manager.get_user_menu(user_id)
        from handlers.menu_buttons import MenuButtons
        keyboard = await MenuButtons.create_server_menu(user_menu)
        
        message_text = """‚õèÔ∏è **–†–∞–∑–¥–µ–ª: –°–µ—Ä–≤–µ—Ä**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def show_storage_section(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        query = update.callback_query
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª
        if user_id in self.active_monitors:
            self.active_monitors[user_id] = False
        
        if not await self.role_manager.check_permission(user_id, "storage", "view"):
            await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É")
            return
        
        user_menu = await self.role_manager.get_user_menu(user_id)
        from handlers.menu_buttons import MenuButtons
        keyboard = await MenuButtons.create_storage_menu(user_menu)
        
        message_text = """‚òÅÔ∏è **–†–∞–∑–¥–µ–ª: –•—Ä–∞–Ω–∏–ª–∏—â–µ**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def show_admin_section(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∞–¥–º–∏–Ω—Å–∫–∏–π —Ä–∞–∑–¥–µ–ª"""
        query = update.callback_query
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª
        if user_id in self.active_monitors:
            self.active_monitors[user_id] = False
        
        if not await self.role_manager.is_admin(user_id):
            await query.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return
        
        user_menu = await self.role_manager.get_user_menu(user_id)
        from handlers.menu_buttons import MenuButtons
        keyboard = await MenuButtons.create_admin_menu(user_menu)
        
        message_text = """üëë **–†–∞–∑–¥–µ–ª: –ê–¥–º–∏–Ω–∫–∞**

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def show_storage_list(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
        query = update.callback_query
        
        if not await self.role_manager.check_permission(user_id, "storage", "view"):
            await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        is_admin = await self.role_manager.is_admin(user_id)
        files = await self.cloud_storage.list_files(user_id, is_admin)
        storage_usage = await self.cloud_storage.get_storage_usage(user_id)
        
        if not files:
            message_text = "‚òÅÔ∏è **–û–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ**\n\nüìÅ –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
        else:
            message_text = "‚òÅÔ∏è **–û–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ**\n\n"
            if storage_usage:
                message_text += f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                message_text += f"   –§–∞–π–ª–æ–≤: {storage_usage['total_files']}\n"
                message_text += f"   –†–∞–∑–º–µ—Ä: {storage_usage['total_size_formatted']} / {storage_usage['max_size_formatted']}\n"
                message_text += f"   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {storage_usage['usage_percent']:.1f}%\n\n"
            
            message_text += "üìÅ **–í–∞—à–∏ —Ñ–∞–π–ª—ã:**\n"
            for file_info in files[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                message_text += f"üìÑ {file_info['original_name']} ({file_info['size_formatted']})\n"
            
            if len(files) > 10:
                message_text += f"\n... –∏ –µ—â–µ {len(files) - 10} —Ñ–∞–π–ª–æ–≤"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —Ñ–∞–π–ª–æ–≤
        from handlers.menu_buttons import MenuButtons
        keyboard = await MenuButtons.create_storage_files_menu(files)
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def show_storage_upload(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤"""
        query = update.callback_query
        
        if not await self.role_manager.check_permission(user_id, "storage", "upload"):
            await query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤")
            return
        
        message_text = """üì§ **–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤**

–ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –≤ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:

1. **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª** –±–æ—Ç—É (–¥–æ–∫—É–º–µ–Ω—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ)
2. **–§–∞–π–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏** —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –≤–∞—à–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
3. **–ü–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ** –æ–± —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–µ

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã:**
üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã (PDF, DOC, TXT –∏ –¥—Ä.)
üñºÔ∏è –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ (JPG, PNG, GIF)
üé• –í–∏–¥–µ–æ (MP4, AVI, MOV)
üéµ –ê—É–¥–∏–æ (MP3, WAV, OGG)
üé§ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è

**–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**
üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: 50MB
üíæ –û–±—â–∏–π –ª–∏–º–∏—Ç —Ö—Ä–∞–Ω–∏–ª–∏—â–∞: 1GB

**–ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:**
‚ùå –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–µ —Ñ–∞–π–ª—ã (.exe, .bat, .cmd)
‚ùå –°–∫—Ä–∏–ø—Ç—ã (.vbs, .js, .com)"""
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìÅ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤", callback_data="storage_list")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="section_storage")]
        ])
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def show_storage_download(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è"""
        query = update.callback_query
        
        if not await self.role_manager.check_permission(user_id, "storage", "download"):
            await query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        is_admin = await self.role_manager.is_admin(user_id)
        files = await self.cloud_storage.list_files(user_id, is_admin)
        
        if not files:
            message_text = "üì• **–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤**\n\nüìÅ –£ –≤–∞—Å –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."
        else:
            message_text = "üì• **–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤**\n\n"
            message_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:\n\n"
            
            for i, file_info in enumerate(files[:10], 1):
                message_text += f"{i}. üìÑ **{file_info['original_name']}**\n"
                message_text += f"   üìè {file_info['size_formatted']} | üìÖ {file_info['upload_time'][:19]}\n\n"
            
            if len(files) > 10:
                message_text += f"... –∏ –µ—â–µ {len(files) - 10} —Ñ–∞–π–ª–æ–≤"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        from handlers.menu_buttons import MenuButtons
        keyboard = await MenuButtons.create_storage_download_menu(files)
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def show_storage_delete(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"""
        query = update.callback_query
        
        if not await self.role_manager.check_permission(user_id, "storage", "delete"):
            await query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
        is_admin = await self.role_manager.is_admin(user_id)
        files = await self.cloud_storage.list_files(user_id, is_admin)
        
        if not files:
            message_text = "üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤**\n\nüìÅ –£ –≤–∞—Å –Ω–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."
        else:
            message_text = "üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤**\n\n"
            message_text += "‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!** –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ.\n\n"
            message_text += "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n"
            
            for i, file_info in enumerate(files[:10], 1):
                message_text += f"{i}. üìÑ **{file_info['original_name']}**\n"
                message_text += f"   üìè {file_info['size_formatted']} | üìÖ {file_info['upload_time'][:19]}\n\n"
            
            if len(files) > 10:
                message_text += f"... –∏ –µ—â–µ {len(files) - 10} —Ñ–∞–π–ª–æ–≤"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        from handlers.menu_buttons import MenuButtons
        keyboard = await MenuButtons.create_storage_delete_menu(files)
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def show_storage_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"""
        query = update.callback_query
        
        if not await self.role_manager.check_permission(user_id, "storage", "view"):
            await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É")
            return
        
        message_text = """üîç **–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤**

–î–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:

1. **–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ** —Å —Ç–µ–∫—Å—Ç–æ–º –ø–æ–∏—Å–∫–∞
2. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:** üîç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
3. **–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ:** –ø–æ–∏—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞

**–ü—Ä–∏–º–µ—Ä—ã:**
üîç –¥–æ–∫—É–º–µ–Ω—Ç
üîç —Ñ–æ—Ç–æ
–ø–æ–∏—Å–∫ –æ—Ç—á–µ—Ç
üîç .pdf

**–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞** –ø–æ–∫–∞–∂—É—Ç –≤—Å–µ —Ñ–∞–π–ª—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏."""
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìÅ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤", callback_data="storage_list")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="section_storage")]
        ])
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def show_admin_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–¥–º–∏–Ω–∫–∞)"""
        query = update.callback_query
        
        if not await self.role_manager.is_admin(user_id):
            await query.answer("‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            return
        
        users = await self.role_manager.list_users(user_id)
        
        if not users:
            message_text = "üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏**\n\n–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç."
        else:
            message_text = "üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏**\n\n"
            for user in users:
                message_text += f"üë§ **{user['name']}** (ID: {user['id']})\n"
                message_text += f"   –†–æ–ª—å: {user['role']}\n"
                message_text += f"   –°–æ–∑–¥–∞–Ω: {user['created_at']}\n\n"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é
        from handlers.menu_buttons import MenuButtons
        keyboard = await MenuButtons.create_admin_menu({"admin": ["users"]})
        
        await query.edit_message_text(
            text=message_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def show_file_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, file_id: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ"""
        query = update.callback_query
        
        if not await self.role_manager.check_permission(user_id, "storage", "view"):
            await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É")
            return
        
        file_info = await self.cloud_storage.get_file_info(file_id, user_id)
        
        if not file_info:
            await query.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–º
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard_buttons = []
        if await self.role_manager.check_permission(user_id, "storage", "download"):
            keyboard_buttons.append(InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å", callback_data=f"file_download_{file_id}"))
        
        if await self.role_manager.check_permission(user_id, "storage", "delete"):
            keyboard_buttons.append(InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"file_delete_{file_id}"))
        
        keyboard_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="storage_list"))
        
        keyboard = InlineKeyboardMarkup([keyboard_buttons])
        
        message_text = f"""üìÑ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ**

üìõ **–ò–º—è:** {file_info['name']}
üìè **–†–∞–∑–º–µ—Ä:** {file_info['size_formatted']}
üìÅ **–¢–∏–ø:** {file_info['extension']}
üìÖ **–ó–∞–≥—Ä—É–∂–µ–Ω:** {file_info['upload_time']}"""

        await query.edit_message_text(
            text=message_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def handle_confirmation(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π –¥–µ–π—Å—Ç–≤–∏–π"""
        query = update.callback_query
        
        # –ü–∞—Ä—Å–∏–Ω–≥ callback_data
        parts = callback_data.split("_")
        if len(parts) < 2:
            await query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
            return
        
        action = parts[1]
        item_id = parts[2] if len(parts) > 2 else None
        
        if action == "delete" and item_id:
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            if await self.role_manager.check_permission(user_id, "storage", "delete"):
                result = await self.cloud_storage.delete_file(item_id, user_id)
                if result["success"]:
                    await query.answer("‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω")
                    await self.show_storage_list(update, context, user_id)
                else:
                    await query.answer(f"‚ùå {result['message']}")
            else:
                await query.answer("‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        else:
            await query.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    async def refresh_current_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é"""
        query = update.callback_query
        await query.answer("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ–Ω—é –∏ –µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        await self.show_main_menu(update, context, user_id)
    
    async def close_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é"""
        query = update.callback_query
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∏
        for user_id in list(self.active_monitors.keys()):
            self.active_monitors[user_id] = False
        
        await query.edit_message_text("üëã –ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ")
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    async def show_system_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        query = update.callback_query
        await query.answer("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        await self.show_system_section(update, context, user_id)
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º
    async def show_server_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞"""
        query = update.callback_query
        await query.answer("‚õèÔ∏è –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        await self.show_server_section(update, context, user_id)
    
    async def start_server(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"""
        query = update.callback_query
        await query.answer("üü¢ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        await self.show_server_section(update, context, user_id)
    
    async def stop_server(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä"""
        query = update.callback_query
        await query.answer("üî¥ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        await self.show_server_section(update, context, user_id)
    
    async def create_server_backup(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø —Å–µ—Ä–≤–µ—Ä–∞"""
        query = update.callback_query
        await query.answer("üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        await self.show_server_section(update, context, user_id)
    
    # –•—Ä–∞–Ω–∏–ª–∏—â–µ
    async def download_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, file_id: str):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        query = update.callback_query
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_info = await self.cloud_storage.get_file_info(file_id, user_id)
            if not file_info:
                await query.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            if not os.path.exists(file_info["path"]):
                await query.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –¥–∏—Å–∫–µ")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await query.answer("üì• –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...")
            
            with open(file_info["path"], 'rb') as file:
                await context.bot.send_document(
                    chat_id=user_id,
                    document=file,
                    filename=file_info["original_name"],
                    caption=f"üìÑ {file_info['original_name']}\nüìè {file_info['size_formatted']}\nüìÖ {file_info['upload_time'][:19]}"
                )
            
            await query.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞")
    
    async def delete_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, file_id: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞"""
        query = update.callback_query
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_info = await self.cloud_storage.get_file_info(file_id, user_id)
            if not file_info:
                await query.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
                return
            
            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª
            result = await self.cloud_storage.delete_file(file_id, user_id)
            
            if result["success"]:
                await query.answer("‚úÖ –§–∞–π–ª —É–¥–∞–ª–µ–Ω")
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
                await self.show_storage_list(update, context, user_id)
            else:
                await query.answer(f"‚ùå {result['message']}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞")
    
    async def handle_file_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, callback_data: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å —Ñ–∞–π–ª–∞–º–∏"""
        try:
            # –ü–∞—Ä—Å–∏–º callback_data
            parts = callback_data.split("_")
            if len(parts) < 3:
                await update.callback_query.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
                return
            
            action = parts[1]
            file_id = parts[2]
            
            if action == "download":
                await self.download_file(update, context, user_id, file_id)
            elif action == "delete":
                await self.delete_file(update, context, user_id, file_id)
            elif action == "info":
                await self.show_file_info(update, context, user_id, file_id)
            else:
                await update.callback_query.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å —Ñ–∞–π–ª–æ–º: {e}")
            await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    async def show_notifications_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        query = update.callback_query
        await query.answer("‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        await self.show_system_section(update, context, user_id)
    
    # –ê–¥–º–∏–Ω–∫–∞
    async def show_admin_permissions(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏"""
        query = update.callback_query
        await query.answer("üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        await self.show_admin_section(update, context, user_id)
    
    async def show_admin_logs(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"""
        query = update.callback_query
        await query.answer("üìù –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
        await self.show_admin_section(update, context, user_id)
    
    async def show_admin_config(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∫–∏"""
        query = update.callback_query
        await query.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
    
    # –ú–µ—Ç–æ–¥—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    async def show_analytics_dashboard(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        query = update.callback_query
        
        if not await self.role_manager.check_permission(user_id, "system", "view"):
            await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–µ")
            return
        
        if not self.analytics:
            await query.answer("‚ùå –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìä –°–≤–æ–¥–∫–∞ —Å–∏—Å—Ç–µ–º—ã", callback_data="analytics_summary")],
            [InlineKeyboardButton("üñ•Ô∏è CPU –∏ –ø–∞–º—è—Ç—å", callback_data="analytics_cpu_memory")],
            [InlineKeyboardButton("üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞", callback_data="analytics_disk")],
            [InlineKeyboardButton("üåê –°–µ—Ç–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="analytics_network")],
            [InlineKeyboardButton("‚öôÔ∏è –¢–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤", callback_data="analytics_processes")],
            [InlineKeyboardButton("üìà –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö (60 —Å–µ–∫)", callback_data="analytics_collect_data")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="section_system")]
        ])
        
        await query.edit_message_text(
            text="üìä **–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
    
    async def create_system_summary(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å–∏—Å—Ç–µ–º—ã"""
        query = update.callback_query
        
        if not self.analytics:
            await query.answer("‚ùå –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        await query.answer("üìä –°–æ–∑–¥–∞—é —Å–≤–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫...")
        
        try:
            chart_path = self.analytics.create_system_summary()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(chart_path, 'rb') as file:
                await context.bot.send_document(
                    chat_id=user_id,
                    document=file,
                    filename="system_summary.html",
                    caption="üìä **–°–≤–æ–¥–∫–∞ —Å–∏—Å—Ç–µ–º—ã**\n\n–û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞"
                )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìä –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="analytics_summary")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_dashboard")]
            ])
            
            await query.edit_message_text(
                text="‚úÖ **–ì—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω!**\n\n–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç. –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤–æ–¥–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
    
    async def create_cpu_memory_chart(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ CPU –∏ –ø–∞–º—è—Ç–∏"""
        query = update.callback_query
        
        if not self.analytics:
            await query.answer("‚ùå –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        await query.answer("üìä –°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫ CPU –∏ –ø–∞–º—è—Ç–∏...")
        
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 30 —Å–µ–∫—É–Ω–¥
            data_points = await self.analytics.collect_data_points(duration=30, interval=2)
            chart_path = self.analytics.create_cpu_memory_chart(data_points)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(chart_path, 'rb') as file:
                await context.bot.send_document(
                    chat_id=user_id,
                    document=file,
                    filename="cpu_memory_chart.html",
                    caption="üñ•Ô∏è **–ì—Ä–∞—Ñ–∏–∫ CPU –∏ –ø–∞–º—è—Ç–∏**\n\n–î–∞–Ω–Ω—ã–µ –∑–∞ 30 —Å–µ–∫—É–Ω–¥"
                )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìä –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="analytics_cpu_memory")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_dashboard")]
            ])
            
            await query.edit_message_text(
                text="‚úÖ **–ì—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω!**\n\n–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç. –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ CPU/–ø–∞–º—è—Ç–∏: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
    
    async def create_disk_chart(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∏—Å–∫–∞"""
        query = update.callback_query
        
        if not self.analytics:
            await query.answer("‚ùå –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        await query.answer("üìä –°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫ –¥–∏—Å–∫–∞...")
        
        try:
            chart_path = self.analytics.create_disk_usage_chart()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(chart_path, 'rb') as file:
                await context.bot.send_document(
                    chat_id=user_id,
                    document=file,
                    filename="disk_usage.html",
                    caption="üíæ **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –¥–∏—Å–∫–∞**\n\n–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞"
                )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìä –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="analytics_disk")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_dashboard")]
            ])
            
            await query.edit_message_text(
                text="‚úÖ **–ì—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω!**\n\n–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç. –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–∏—Å–∫–∞: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
    
    async def create_network_chart(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        query = update.callback_query
        
        if not self.analytics:
            await query.answer("‚ùå –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        await query.answer("üìä –°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫ —Å–µ—Ç–∏...")
        
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 30 —Å–µ–∫—É–Ω–¥
            data_points = await self.analytics.collect_data_points(duration=30, interval=2)
            chart_path = self.analytics.create_network_chart(data_points)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(chart_path, 'rb') as file:
                await context.bot.send_document(
                    chat_id=user_id,
                    document=file,
                    filename="network_activity.html",
                    caption="üåê **–°–µ—Ç–µ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å**\n\n–î–∞–Ω–Ω—ã–µ –∑–∞ 30 —Å–µ–∫—É–Ω–¥"
                )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìä –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="analytics_network")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_dashboard")]
            ])
            
            await query.edit_message_text(
                text="‚úÖ **–ì—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω!**\n\n–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç. –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ç–µ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
    
    async def create_processes_chart(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–°–æ–∑–¥–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ —Ç–æ–ø –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        query = update.callback_query
        
        if not self.analytics:
            await query.answer("‚ùå –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        await query.answer("üìä –°–æ–∑–¥–∞—é –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        
        try:
            chart_path = self.analytics.create_processes_chart(top_n=10)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(chart_path, 'rb') as file:
                await context.bot.send_document(
                    chat_id=user_id,
                    document=file,
                    filename="top_processes.html",
                    caption="‚öôÔ∏è **–¢–æ–ø 10 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤**\n\n–ü–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é CPU –∏ –ø–∞–º—è—Ç–∏"
                )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìä –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="analytics_processes")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_dashboard")]
            ])
            
            await query.edit_message_text(
                text="‚úÖ **–ì—Ä–∞—Ñ–∏–∫ —Å–æ–∑–¥–∞–Ω!**\n\n–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç. –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
    
    async def start_data_collection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        query = update.callback_query
        
        if not self.analytics:
            await query.answer("‚ùå –ú–æ–¥—É–ª—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        await query.answer("üìà –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö...")
        
        try:
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥
            data_points = await self.analytics.collect_data_points(duration=60, interval=2)
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
            chart_path = self.analytics.create_cpu_memory_chart(data_points)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(chart_path, 'rb') as file:
                await context.bot.send_document(
                    chat_id=user_id,
                    document=file,
                    filename="system_analysis.html",
                    caption="üìà **–ê–Ω–∞–ª–∏–∑ —Å–∏—Å—Ç–µ–º—ã**\n\n–î–∞–Ω–Ω—ã–µ –∑–∞ 60 —Å–µ–∫—É–Ω–¥"
                )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üìä –°–æ–∑–¥–∞—Ç—å –µ—â–µ", callback_data="analytics_collect_data")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="analytics_dashboard")]
            ])
            
            await query.edit_message_text(
                text="‚úÖ **–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n–§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç. –û—Ç–∫—Ä–æ–π—Ç–µ –µ–≥–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö") 