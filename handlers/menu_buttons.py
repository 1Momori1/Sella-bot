from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from typing import Dict, List, Any

class MenuButtons:
    """–ö–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –∏ –º–µ–Ω—é"""
    
    @staticmethod
    async def create_main_menu(user_permissions: Dict[str, List[str]]) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å —Ä–∞–∑–¥–µ–ª–∞–º–∏"""
        keyboard = []
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
        main_sections = []
        
        # –°–∏—Å—Ç–µ–º–∞
        if "system" in user_permissions and "view" in user_permissions["system"]:
            main_sections.append(InlineKeyboardButton("üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞", callback_data="section_system"))
        
        # –°–µ—Ä–≤–µ—Ä
        if "server" in user_permissions and "view" in user_permissions["server"]:
            main_sections.append(InlineKeyboardButton("‚õèÔ∏è –°–µ—Ä–≤–µ—Ä", callback_data="section_server"))
        
        # –•—Ä–∞–Ω–∏–ª–∏—â–µ
        if "storage" in user_permissions and "view" in user_permissions["storage"]:
            main_sections.append(InlineKeyboardButton("‚òÅÔ∏è –•—Ä–∞–Ω–∏–ª–∏—â–µ", callback_data="section_storage"))
        
        # –ê–¥–º–∏–Ω–∫–∞
        if "admin" in user_permissions:
            main_sections.append(InlineKeyboardButton("üëë –ê–¥–º–∏–Ω–∫–∞", callback_data="section_admin"))
        
        # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
        for i in range(0, len(main_sections), 2):
            row = [main_sections[i]]
            if i + 1 < len(main_sections):
                row.append(main_sections[i + 1])
            keyboard.append(row)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.append([
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh"),
            InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")
        ])
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    async def create_system_menu(user_permissions: Dict[str, List[str]]) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —Å–∏—Å—Ç–µ–º—ã"""
        keyboard = []
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if "system" in user_permissions and "view" in user_permissions["system"]:
            keyboard.append([InlineKeyboardButton("üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã", callback_data="system_monitor")])
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        if "system" in user_permissions and "settings" in user_permissions["system"]:
            keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã", callback_data="system_settings")])
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if "notifications" in user_permissions and "view" in user_permissions["notifications"]:
            keyboard.append([InlineKeyboardButton("‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π", callback_data="notifications_settings")])
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard.append([
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"),
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")
        ])
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    async def create_server_menu(user_permissions: Dict[str, List[str]]) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —Å–µ—Ä–≤–µ—Ä–∞"""
        keyboard = []
        
        # –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
        if "server" in user_permissions and "view" in user_permissions["server"]:
            keyboard.append([InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞", callback_data="server_status")])
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º
        if "server" in user_permissions and "manage" in user_permissions["server"]:
            keyboard.append([
                InlineKeyboardButton("üü¢ –ó–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="server_start"),
                InlineKeyboardButton("üî¥ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data="server_stop")
            ])
        
        # –ë—ç–∫–∞–ø—ã
        if "server" in user_permissions and "backup" in user_permissions["server"]:
            keyboard.append([InlineKeyboardButton("üíæ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø", callback_data="server_backup")])
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard.append([
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"),
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")
        ])
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    async def create_storage_menu(user_permissions: Dict[str, List[str]]) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        keyboard = []
        
        # –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–æ–≤
        if "storage" in user_permissions and "view" in user_permissions["storage"]:
            keyboard.append([InlineKeyboardButton("üìÅ –ú–æ–∏ —Ñ–∞–π–ª—ã", callback_data="storage_list")])
        
        # –ó–∞–≥—Ä—É–∑–∫–∞
        if "storage" in user_permissions and "upload" in user_permissions["storage"]:
            keyboard.append([InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª", callback_data="storage_upload")])
        
        # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ
        if "storage" in user_permissions and "download" in user_permissions["storage"]:
            keyboard.append([InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª", callback_data="storage_download")])
        
        # –ü–æ–∏—Å–∫
        if "storage" in user_permissions and "view" in user_permissions["storage"]:
            keyboard.append([InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤", callback_data="storage_search")])
        
        # –£–¥–∞–ª–µ–Ω–∏–µ
        if "storage" in user_permissions and "delete" in user_permissions["storage"]:
            keyboard.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª", callback_data="storage_delete")])
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard.append([
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"),
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")
        ])
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    async def create_admin_menu(user_permissions: Dict[str, List[str]]) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é"""
        keyboard = []
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        if "admin" in user_permissions:
            keyboard.append([InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users")])
            keyboard.append([InlineKeyboardButton("üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏", callback_data="admin_permissions")])
            keyboard.append([InlineKeyboardButton("üìù –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤", callback_data="admin_logs")])
            keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", callback_data="admin_config")])
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard.append([
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu"),
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh")
        ])
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    async def create_storage_files_menu(files: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —Ñ–∞–π–ª–æ–≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        buttons = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–µ—Ä–≤—ã–µ 5)
        for i, file_info in enumerate(files[:5]):
            file_name = file_info['original_name']
            if len(file_name) > 20:
                file_name = file_name[:17] + "..."
            
            buttons.append([
                InlineKeyboardButton(
                    f"üìÑ {file_name}",
                    callback_data=f"file_info_{file_info['id']}"
                )
            ])
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        action_buttons = []
        if files:
            action_buttons.extend([
                InlineKeyboardButton("üì• –°–∫–∞—á–∞—Ç—å", callback_data="storage_download"),
                InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data="storage_delete")
            ])
        
        action_buttons.extend([
            InlineKeyboardButton("üîç –ü–æ–∏—Å–∫", callback_data="storage_search"),
            InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="storage_list")
        ])
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ 2 –≤ —Ä—è–¥
        for i in range(0, len(action_buttons), 2):
            if i + 1 < len(action_buttons):
                buttons.append([action_buttons[i], action_buttons[i + 1]])
            else:
                buttons.append([action_buttons[i]])
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="section_storage")])
        
        return InlineKeyboardMarkup(buttons)
    
    @staticmethod
    async def create_storage_download_menu(files: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
        buttons = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–µ—Ä–≤—ã–µ 8)
        for i, file_info in enumerate(files[:8]):
            file_name = file_info['original_name']
            if len(file_name) > 25:
                file_name = file_name[:22] + "..."
            
            buttons.append([
                InlineKeyboardButton(
                    f"üì• {file_name}",
                    callback_data=f"file_download_{file_info['id']}"
                )
            ])
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        buttons.append([
            InlineKeyboardButton("üìÅ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤", callback_data="storage_list"),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="section_storage")
        ])
        
        return InlineKeyboardMarkup(buttons)
    
    @staticmethod
    async def create_storage_delete_menu(files: List[Dict[str, Any]]) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
        buttons = []
        
        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–µ—Ä–≤—ã–µ 8)
        for i, file_info in enumerate(files[:8]):
            file_name = file_info['original_name']
            if len(file_name) > 25:
                file_name = file_name[:22] + "..."
            
            buttons.append([
                InlineKeyboardButton(
                    f"üóëÔ∏è {file_name}",
                    callback_data=f"file_delete_{file_info['id']}"
                )
            ])
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        buttons.append([
            InlineKeyboardButton("üìÅ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤", callback_data="storage_list"),
            InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="section_storage")
        ])
        
        return InlineKeyboardMarkup(buttons)
    
    @staticmethod
    async def create_confirm_menu(action: str, item_id: str = None) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
        callback_data = f"confirm_{action}"
        if item_id:
            callback_data += f"_{item_id}"
        
        keyboard = [
            [
                InlineKeyboardButton("‚úÖ –î–∞", callback_data=callback_data),
                InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel")
            ],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        return InlineKeyboardMarkup(keyboard)
    
    @staticmethod
    async def create_pagination_menu(current_page: int, total_pages: int, base_callback: str) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        nav_buttons = []
        if current_page > 1:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f"{base_callback}_page_{current_page-1}"))
        
        nav_buttons.append(InlineKeyboardButton(f"{current_page}/{total_pages}", callback_data="no_action"))
        
        if current_page < total_pages:
            nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f"{base_callback}_page_{current_page+1}"))
        
        keyboard.append(nav_buttons)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])
        
        return InlineKeyboardMarkup(keyboard) 