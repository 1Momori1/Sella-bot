from telegram import Update
from telegram.ext import ContextTypes
from typing import Dict, Any
import logging
import os
import tempfile

logger = logging.getLogger(__name__)

class MessageHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self, role_manager, cloud_storage, notification_manager):
        self.role_manager = role_manager
        self.cloud_storage = cloud_storage
        self.notification_manager = notification_manager
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not update.message or not update.message.from_user:
            return
        
        user_id = update.message.from_user.id
        message_text = update.message.text or ""
        
        try:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if message_text.startswith('/'):
                await self.handle_command(update, context, user_id, message_text)
            else:
                await self.handle_text_message(update, context, user_id, message_text)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    async def handle_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
        if not update.message or not update.message.from_user:
            return
        
        user_id = update.message.from_user.id
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É
            if not await self.role_manager.check_permission(user_id, "storage", "upload"):
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
            file_info = None
            original_filename = ""
            
            if update.message.document:
                file_info = update.message.document
                original_filename = file_info.file_name or "document"
            elif update.message.photo:
                file_info = update.message.photo[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
                original_filename = f"photo_{file_info.file_id}.jpg"
            elif update.message.video:
                file_info = update.message.video
                original_filename = file_info.file_name or f"video_{file_info.file_id}.mp4"
            elif update.message.audio:
                file_info = update.message.audio
                original_filename = file_info.file_name or f"audio_{file_info.file_id}.mp3"
            elif update.message.voice:
                file_info = update.message.voice
                original_filename = f"voice_{file_info.file_id}.ogg"
            else:
                await update.message.reply_text("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞")
                return
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
            await update.message.reply_text("üì• –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")
            
            temp_file = await context.bot.get_file(file_info.file_id)
            temp_path = os.path.join(tempfile.gettempdir(), f"temp_{file_info.file_id}")
            
            await temp_file.download_to_drive(temp_path)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            result = await self.cloud_storage.save_file(user_id, temp_path, original_filename)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(temp_path):
                os.remove(temp_path)
            
            if result["success"]:
                file_info = result["file_info"]
                message = f"‚úÖ **–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!**\n\n"
                message += f"üìÑ **–ò–º—è:** {file_info['original_name']}\n"
                message += f"üìè **–†–∞–∑–º–µ—Ä:** {file_info['size_formatted']}\n"
                message += f"üìÅ **–¢–∏–ø:** {file_info['extension']}\n"
                message += f"üìÖ **–ó–∞–≥—Ä—É–∂–µ–Ω:** {file_info['upload_time'][:19]}\n\n"
                message += f"üíæ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≤–∞—à–µ–º –æ–±–ª–∞—á–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"
                
                await update.message.reply_text(message, parse_mode='Markdown')
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                await self.notification_manager.send_notification(
                    user_id, 
                    "file_uploaded", 
                    f"–§–∞–π–ª {file_info['original_name']} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω"
                )
            else:
                await update.message.reply_text(f"‚ùå **–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:** {result['message']}", parse_mode='Markdown')
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞")
    
    async def handle_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, command: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥"""
        try:
            if command == "/start":
                await self.handle_start_command(update, context, user_id)
            elif command == "/help":
                await self.handle_help_command(update, context, user_id)
            elif command == "/menu":
                await self.handle_menu_command(update, context, user_id)
            else:
                await update.message.reply_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã {command}: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø–æ–∏—Å–∫–æ–≤—ã–º –∑–∞–ø—Ä–æ—Å–æ–º –¥–ª—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
            if message_text.startswith("üîç") or message_text.startswith("–ø–æ–∏—Å–∫"):
                await self.handle_storage_search(update, context, user_id, message_text)
            else:
                # –û–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await update.message.reply_text(
                    "üí¨ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    async def handle_start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        try:
            welcome_message = """ü§ñ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–µ–ª–ª–∞!**

–Ø —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞–º–∏ –∏ –æ–±–ª–∞—á–Ω—ã–º–∏ —Ä–µ—Å—É—Ä—Å–∞–º–∏.

**–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**
üñ•Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã (—Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º)
‚õèÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–æ–º
‚òÅÔ∏è –û–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Ñ–∞–π–ª–æ–≤
üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏

–ù–∞—á–Ω–∏—Ç–µ —Ä–∞–±–æ—Ç—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å! üöÄ"""

            await update.message.reply_text(welcome_message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã start: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ")
    
    async def handle_help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        try:
            help_message = """üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –°–µ–ª–ª–∞**

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

**–†–∞–∑–¥–µ–ª—ã:**
üñ•Ô∏è **–°–∏—Å—Ç–µ–º–∞** - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
‚õèÔ∏è **–°–µ—Ä–≤–µ—Ä** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã–º–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏
‚òÅÔ∏è **–•—Ä–∞–Ω–∏–ª–∏—â–µ** - –∑–∞–≥—Ä—É–∑–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏
üëë **–ê–¥–º–∏–Ω–∫–∞** - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –ø—Ä–∞–≤–∞–º–∏

**–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤:**
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–π —Ñ–∞–π–ª –±–æ—Ç—É, –∏ –æ–Ω –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –≤–∞—à–µ–º –æ–±–ª–∞—á–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ.

**–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:**
–í —Ä–∞–∑–¥–µ–ª–µ "–°–∏—Å—Ç–µ–º–∞" –¥–æ—Å—Ç—É–ø–µ–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã.

**–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."""

            await update.message.reply_text(help_message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã help: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∫–∏")
    
    async def handle_menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /menu"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_menu = await self.role_manager.get_user_menu(user_id)
            user_info = await self.role_manager.get_user_info(user_id)
            user_name = user_info["name"] if user_info else "–ì–æ—Å—Ç—å"
            user_role = user_info["role"] if user_info else "guest"
            
            # –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            from handlers.menu_buttons import MenuButtons
            keyboard = await MenuButtons.create_main_menu(user_menu)
            
            message_text = f"""ü§ñ **–°–µ–ª–ª–∞ - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {user_name} ({user_role})

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"""
            
            await update.message.reply_text(
                text=message_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã menu: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é")
    
    async def handle_storage_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, message_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –ø–æ–∏—Å–∫
            if not await self.role_manager.check_permission(user_id, "storage", "view"):
                await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤")
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            query = message_text.replace("üîç", "").replace("–ø–æ–∏—Å–∫", "").strip()
            if not query:
                await update.message.reply_text("‚ùå –£–∫–∞–∂–∏—Ç–µ —á—Ç–æ –∏—Å–∫–∞—Ç—å. –ù–∞–ø—Ä–∏–º–µ—Ä: üîç –¥–æ–∫—É–º–µ–Ω—Ç")
                return
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            is_admin = await self.role_manager.is_admin(user_id)
            files = await self.cloud_storage.search_files(user_id, query, is_admin)
            
            if not files:
                await update.message.reply_text(f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
            result_message = f"üîç **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞: '{query}'**\n\n"
            
            for i, file_info in enumerate(files[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                result_message += f"{i}. üìÑ **{file_info['original_name']}**\n"
                result_message += f"   üìè {file_info['size_formatted']} | üìÖ {file_info['upload_time'][:19]}\n\n"
            
            if len(files) > 10:
                result_message += f"... –∏ –µ—â–µ {len(files) - 10} —Ñ–∞–π–ª–æ–≤"
            
            await update.message.reply_text(result_message, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ñ–∞–π–ª–æ–≤") 