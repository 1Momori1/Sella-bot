import os
import tempfile
import logging
from telegram import Update
from telegram.ext import ContextTypes
from typing import Optional

logger = logging.getLogger(__name__)

class FileHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±–ª–∞—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
    
    def __init__(self, cloud_storage, role_manager):
        self.cloud_storage = cloud_storage
        self.role_manager = role_manager
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        user_id = update.effective_user.id
        
        if not await self.role_manager.check_permission(user_id, "storage", "upload"):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤")
            return
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
            document = update.message.document
            file_name = document.file_name
            file_size = document.file_size
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            max_size = self.cloud_storage.max_file_size
            if file_size > max_size:
                await update.message.reply_text(
                    f"‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size} –±–∞–π—Ç). –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size} –±–∞–π—Ç"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
            file_ext = os.path.splitext(file_name)[1].lower().lstrip('.')
            if self.cloud_storage.allowed_extensions and file_ext not in self.cloud_storage.allowed_extensions:
                await update.message.reply_text(f"‚ùå –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ .{file_ext} –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ")
                return
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            await update.message.reply_text("üì• –ó–∞–≥—Ä—É–∂–∞—é —Ñ–∞–π–ª...")
            
            file = await context.bot.get_file(document.file_id)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            with tempfile.NamedTemporaryFile(delete=False, suffix=f".{file_ext}") as temp_file:
                temp_path = temp_file.name
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            await file.download_to_drive(temp_path)
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            result = await self.cloud_storage.upload_file(temp_path, user_id, file_name)
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            os.unlink(temp_path)
            
            if result["success"]:
                await update.message.reply_text(
                    f"‚úÖ –§–∞–π–ª **{file_name}** —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n"
                    f"üìè –†–∞–∑–º–µ—Ä: {result['size']} –±–∞–π—Ç\n"
                    f"üÜî ID: `{result['file_id']}`",
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {result['message']}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞")
    
    async def handle_photo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–æ—Ç–æ"""
        user_id = update.effective_user.id
        
        if not await self.role_manager.check_permission(user_id, "storage", "upload"):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤")
            return
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º —Ä–∞–∑–º–µ—Ä–æ–º
            photos = update.message.photo
            photo = photos[-1]  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            file_name = f"photo_{update.message.message_id}.jpg"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            max_size = self.cloud_storage.max_file_size
            if photo.file_size > max_size:
                await update.message.reply_text(
                    f"‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({photo.file_size} –±–∞–π—Ç). –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size} –±–∞–π—Ç"
                )
                return
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ
            await update.message.reply_text("üì• –ó–∞–≥—Ä—É–∂–∞—é —Ñ–æ—Ç–æ...")
            
            file = await context.bot.get_file(photo.file_id)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as temp_file:
                temp_path = temp_file.name
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            await file.download_to_drive(temp_path)
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            result = await self.cloud_storage.upload_file(temp_path, user_id, file_name)
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            os.unlink(temp_path)
            
            if result["success"]:
                await update.message.reply_text(
                    f"‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n"
                    f"üìè –†–∞–∑–º–µ—Ä: {result['size']} –±–∞–π—Ç\n"
                    f"üÜî ID: `{result['file_id']}`",
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {result['message']}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ")
    
    async def handle_video(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –≤–∏–¥–µ–æ"""
        user_id = update.effective_user.id
        
        if not await self.role_manager.check_permission(user_id, "storage", "upload"):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤")
            return
        
        try:
            video = update.message.video
            file_name = video.file_name or f"video_{update.message.message_id}.mp4"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            max_size = self.cloud_storage.max_file_size
            if video.file_size > max_size:
                await update.message.reply_text(
                    f"‚ùå –í–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({video.file_size} –±–∞–π—Ç). –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size} –±–∞–π—Ç"
                )
                return
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
            await update.message.reply_text("üì• –ó–∞–≥—Ä—É–∂–∞—é –≤–∏–¥–µ–æ...")
            
            file = await context.bot.get_file(video.file_id)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            with tempfile.NamedTemporaryFile(delete=False, suffix=".mp4") as temp_file:
                temp_path = temp_file.name
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            await file.download_to_drive(temp_path)
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            result = await self.cloud_storage.upload_file(temp_path, user_id, file_name)
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            os.unlink(temp_path)
            
            if result["success"]:
                await update.message.reply_text(
                    f"‚úÖ –í–∏–¥–µ–æ **{file_name}** —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n"
                    f"üìè –†–∞–∑–º–µ—Ä: {result['size']} –±–∞–π—Ç\n"
                    f"üÜî ID: `{result['file_id']}`",
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {result['message']}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ")
    
    async def handle_audio(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ"""
        user_id = update.effective_user.id
        
        if not await self.role_manager.check_permission(user_id, "storage", "upload"):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤")
            return
        
        try:
            audio = update.message.audio
            file_name = audio.file_name or f"audio_{update.message.message_id}.mp3"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–∞–π–ª–∞
            max_size = self.cloud_storage.max_file_size
            if audio.file_size > max_size:
                await update.message.reply_text(
                    f"‚ùå –ê—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ ({audio.file_size} –±–∞–π—Ç). –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {max_size} –±–∞–π—Ç"
                )
                return
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ
            await update.message.reply_text("üì• –ó–∞–≥—Ä—É–∂–∞—é –∞—É–¥–∏–æ...")
            
            file = await context.bot.get_file(audio.file_id)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as temp_file:
                temp_path = temp_file.name
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            await file.download_to_drive(temp_path)
            
            # –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
            result = await self.cloud_storage.upload_file(temp_path, user_id, file_name)
            
            # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
            os.unlink(temp_path)
            
            if result["success"]:
                await update.message.reply_text(
                    f"‚úÖ –ê—É–¥–∏–æ **{file_name}** —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!\n"
                    f"üìè –†–∞–∑–º–µ—Ä: {result['size']} –±–∞–π—Ç\n"
                    f"üÜî ID: `{result['file_id']}`",
                    parse_mode='Markdown'
                )
            else:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {result['message']}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ")
    
    async def download_file(self, update: Update, context: ContextTypes.DEFAULT_TYPE, file_id: str):
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
        user_id = update.effective_user.id
        
        if not await self.role_manager.check_permission(user_id, "storage", "download"):
            await update.callback_query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤")
            return
        
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
            file_info = await self.cloud_storage.get_file_info(file_id, user_id)
            if not file_info:
                await update.callback_query.answer("‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
            file_data = await self.cloud_storage.download_file(file_id, user_id)
            if not file_data:
                await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞")
                return
            
            file_path, original_filename = file_data
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            with open(file_path, 'rb') as file:
                await context.bot.send_document(
                    chat_id=user_id,
                    document=file,
                    filename=original_filename,
                    caption=f"üì• –§–∞–π–ª: {original_filename}"
                )
            
            await update.callback_query.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
            await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞") 