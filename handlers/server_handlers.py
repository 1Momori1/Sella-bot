import os
import sys
import psutil
import asyncio
import subprocess
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

async def server_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –∏ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –±–æ—Ç–∞
        current_pid = os.getpid()
        process = psutil.Process(current_pid)
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        cpu_percent = psutil.cpu_percent()
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        
        # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        uptime = datetime.now() - datetime.fromtimestamp(process.create_time())
        uptime_str = f"{uptime.days}–¥ {uptime.seconds // 3600}—á {(uptime.seconds % 3600) // 60}–º"
        
        # –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        bot_status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if process.is_running() else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        
        status_text = f"""
ü§ñ **–°–¢–ê–¢–£–° –ë–û–¢–ê**

**–ë–æ—Ç:** {bot_status}
**PID:** {current_pid}
**–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** {uptime_str}
**–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:** {process.memory_info().rss / 1024 / 1024:.1f} –ú–ë

üñ•Ô∏è **–°–ò–°–¢–ï–ú–ê**
**CPU:** {cpu_percent:.1f}%
**–ü–∞–º—è—Ç—å:** {memory.percent:.1f}%
**–î–∏—Å–∫:** {disk.percent:.1f}%
**–í–µ—Ä—Å–∏—è Python:** {sys.version.split()[0]}
        """
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data="server_restart")],
            [InlineKeyboardButton("üìä –ü—Ä–æ—Ü–µ—Å—Å—ã Python", callback_data="server_processes")],
            [InlineKeyboardButton("üíæ –°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø", callback_data="server_backup")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="server_status")]
        ])
        
        await update.message.reply_text(
            status_text.strip(),
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")

async def restart_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"""
    query = update.callback_query
    
    try:
        await query.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å", callback_data="server_restart_confirm")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="server_status")]
        ])
        
        await query.edit_message_text(
            "‚ö†Ô∏è **–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞**\n\n"
            "–ë–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def confirm_restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
    query = update.callback_query
    
    try:
        await query.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...")
        
        await query.edit_message_text(
            "üîÑ **–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞**\n\n"
            "–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å /start —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
        )
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        asyncio.create_task(perform_restart())
        
    except Exception as e:
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def perform_restart():
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å
        await asyncio.sleep(2)
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        python = sys.executable
        os.execl(python, python, *sys.argv)
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: {e}")

async def show_processes(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å—ã Python"""
    query = update.callback_query
    
    try:
        await query.answer("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã Python
        python_processes = []
        for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'memory_info']):
            try:
                if 'python' in proc.info['name'].lower():
                    memory_mb = proc.info['memory_info'].rss / 1024 / 1024
                    python_processes.append({
                        'pid': proc.info['pid'],
                        'name': proc.info['name'],
                        'cmdline': ' '.join(proc.info['cmdline'][:3]) if proc.info['cmdline'] else '',
                        'memory': memory_mb
                    })
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
        
        if python_processes:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –ø–∞–º—è—Ç–∏
            python_processes.sort(key=lambda x: x['memory'], reverse=True)
            
            processes_text = "üêç **–ü—Ä–æ—Ü–µ—Å—Å—ã Python**\n\n"
            for i, proc in enumerate(python_processes[:10], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø 10
                processes_text += f"{i}. **PID {proc['pid']}**\n"
                processes_text += f"   –ü–∞–º—è—Ç—å: {proc['memory']:.1f} –ú–ë\n"
                processes_text += f"   –ö–æ–º–∞–Ω–¥–∞: {proc['cmdline'][:50]}...\n\n"
        else:
            processes_text = "üêç **–ü—Ä–æ—Ü–µ—Å—Å—ã Python**\n\n–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ Python."
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="server_processes")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="server_status")]
        ])
        
        await query.edit_message_text(
            processes_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def create_backup(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –¥–∞–Ω–Ω—ã—Ö"""
    query = update.callback_query
    
    try:
        await query.answer("üíæ –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞...")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –±—ç–∫–∞–ø–æ–≤ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        backup_dir = "storage/backups"
        os.makedirs(backup_dir, exist_ok=True)
        
        # –ò–º—è —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_name = f"backup_{timestamp}.tar.gz"
        backup_path = os.path.join(backup_dir, backup_name)
        
        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
        import tarfile
        with tarfile.open(backup_path, "w:gz") as tar:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –±—ç–∫–∞–ø–∞
            folders_to_backup = ["storage", "logs", "config.json"]
            for folder in folders_to_backup:
                if os.path.exists(folder):
                    tar.add(folder, arcname=os.path.basename(folder))
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(backup_path) / 1024 / 1024  # –ú–ë
        
        backup_text = f"""
üíæ **–ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω!**

**–§–∞–π–ª:** {backup_name}
**–†–∞–∑–º–µ—Ä:** {file_size:.2f} –ú–ë
**–ü—É—Ç—å:** {backup_path}
**–í—Ä–µ–º—è:** {datetime.now().strftime("%d.%m.%Y %H:%M:%S")}

‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!
        """
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìÅ –°–∫–∞—á–∞—Ç—å –±—ç–∫–∞–ø", callback_data=f"backup_download_{backup_name}")],
            [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –±—ç–∫–∞–ø", callback_data=f"backup_delete_{backup_name}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="server_status")]
        ])
        
        await query.edit_message_text(
            backup_text.strip(),
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {str(e)}") 