import json
import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes

logger = logging.getLogger(__name__)

async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE, role_manager=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    user_id = update.effective_user.id
    
    if not role_manager:
        await update.message.reply_text("‚ùå –ú–æ–¥—É–ª—å —Ä–æ–ª–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await role_manager.check_permission(user_id, "admin", "view"):
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    try:
        users = await role_manager.list_users(user_id)
        
        if users:
            users_text = "üë• **–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π**\n\n"
            
            for i, user in enumerate(users, 1):
                last_seen = user.get('last_seen', '–ù–∏–∫–æ–≥–¥–∞')
                if isinstance(last_seen, str) and last_seen != '–ù–∏–∫–æ–≥–¥–∞':
                    try:
                        last_seen = datetime.fromisoformat(last_seen).strftime("%d.%m.%Y %H:%M")
                    except:
                        pass
                
                users_text += f"{i}. **{user['name']}** (ID: {user['id']})\n"
                users_text += f"   –†–æ–ª—å: {user['role']}\n"
                users_text += f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑: {last_seen}\n\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_add_user")],
                [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞", callback_data="admin_edit_permissions")],
                [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_delete_user")],
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="admin_users")]
            ])
            
            await update.message.reply_text(
                users_text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

async def add_user(update: Update, context: ContextTypes.DEFAULT_TYPE, role_manager=None):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    
    if not role_manager:
        await query.answer("‚ùå –ú–æ–¥—É–ª—å —Ä–æ–ª–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await role_manager.check_permission(query.from_user.id, "admin", "manage"):
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    try:
        await query.answer("‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üìù –í–≤–µ—Å—Ç–∏ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_add_user_id")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]
        ])
        
        await query.edit_message_text(
            "‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
            "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            "1. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É –∫–æ–º–∞–Ω–¥—É /start\n"
            "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ Telegram ID\n"
            "3. –í–≤–µ–¥–∏—Ç–µ ID –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å\n\n"
            "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –≤–≤–æ–¥–∞ ID:",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def show_add_user_form(update: Update, context: ContextTypes.DEFAULT_TYPE, role_manager=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    
    try:
        await query.answer("üìù –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è...")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['adding_user'] = True
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ä–æ–ª—è–º–∏
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", callback_data="admin_role_user")],
            [InlineKeyboardButton("üîß –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", callback_data="admin_role_moderator")],
            [InlineKeyboardButton("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data="admin_role_admin")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_users")]
        ])
        
        await query.edit_message_text(
            "üìù **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
            "–ó–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n"
            "**–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å Telegram ID:**\n"
            "1. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É @userinfobot\n"
            "2. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –µ–≥–æ ID –∏–∑ –æ—Ç–≤–µ—Ç–∞\n"
            "3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –º–Ω–µ",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def handle_user_id_input(update: Update, context: ContextTypes.DEFAULT_TYPE, role_manager=None):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–≤–æ–¥ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not context.user_data.get('adding_user'):
        return
    
    try:
        user_id_text = update.message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —á–∏—Å–ª–æ
        try:
            user_id = int(user_id_text)
        except ValueError:
            await update.message.reply_text(
                "‚ùå **–û—à–∏–±–∫–∞!**\n\n"
                "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –≤ –º–µ–Ω—é.",
                parse_mode='Markdown'
            )
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context.user_data['new_user_id'] = user_id
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", callback_data="admin_role_user")],
            [InlineKeyboardButton("üîß –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", callback_data="admin_role_moderator")],
            [InlineKeyboardButton("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data="admin_role_admin")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_users")]
        ])
        
        await update.message.reply_text(
            f"‚úÖ **ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏–Ω—è—Ç:** {user_id}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ID: {str(e)}")

async def set_user_role(update: Update, context: ContextTypes.DEFAULT_TYPE, role_manager=None):
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–æ–ª—å –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    
    if not role_manager:
        await query.answer("‚ùå –ú–æ–¥—É–ª—å —Ä–æ–ª–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –∏–∑ callback_data
        role = query.data.replace("admin_role_", "")
        role_names = {
            "user": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
            "moderator": "–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä", 
            "admin": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
        }
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        user_id = context.user_data.get('new_user_id')
        if not user_id:
            await query.answer("‚ùå ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await role_manager.add_user(
            user_id=user_id,
            name=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}",
            role=role,
            added_by=query.from_user.id
        )
        
        if success:
            await query.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ä–æ–ª—å—é '{role_names[role]}'")
            
            # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context.user_data.pop('adding_user', None)
            context.user_data.pop('new_user_id', None)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_add_user")],
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="admin_users")]
            ])
            
            await query.edit_message_text(
                f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω!**\n\n"
                f"**ID:** {user_id}\n"
                f"**–†–æ–ª—å:** {role_names[role]}\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
    except Exception as e:
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def delete_user(update: Update, context: ContextTypes.DEFAULT_TYPE, role_manager=None):
    """–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    
    if not role_manager:
        await query.answer("‚ùå –ú–æ–¥—É–ª—å —Ä–æ–ª–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await role_manager.check_permission(query.from_user.id, "admin", "manage"):
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    try:
        await query.answer("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞
        users = await role_manager.list_users(query.from_user.id)
        
        if not users:
            await query.edit_message_text(
                "‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
                reply_markup=InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]
                ])
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        keyboard = []
        for user in users:
            if user['id'] != query.from_user.id:  # –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è
                keyboard.append([
                    InlineKeyboardButton(
                        f"üóëÔ∏è {user['name']} ({user['role']})", 
                        callback_data=f"admin_delete_confirm_{user['id']}"
                    )
                ])
        
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")])
        
        await query.edit_message_text(
            "üóëÔ∏è **–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n"
            "(–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è)",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        
    except Exception as e:
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def confirm_delete_user(update: Update, context: ContextTypes.DEFAULT_TYPE, role_manager=None):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
        user_id = int(query.data.replace("admin_delete_confirm_", ""))
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = await role_manager.get_user_info(user_id)
        
        if not user_info:
            await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"admin_delete_final_{user_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_delete_user")]
        ])
        
        await query.edit_message_text(
            f"‚ö†Ô∏è **–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è**\n\n"
            f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
            f"**{user_info['name']}** (ID: {user_id})\n"
            f"–†–æ–ª—å: {user_info['role']}\n\n"
            f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def final_delete_user(update: Update, context: ContextTypes.DEFAULT_TYPE, role_manager=None):
    """–í—ã–ø–æ–ª–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    query = update.callback_query
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
        user_id = int(query.data.replace("admin_delete_final_", ""))
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        success = await role_manager.remove_user(user_id, query.from_user.id)
        
        if success:
            await query.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω")
            
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="admin_users")]
            ])
            
            await query.edit_message_text(
                f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!**\n\n"
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã.",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        else:
            await query.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            
    except Exception as e:
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def show_logs(update: Update, context: ContextTypes.DEFAULT_TYPE, role_manager=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –±–æ—Ç–∞"""
    query = update.callback_query
    
    if not role_manager:
        await query.answer("‚ùå –ú–æ–¥—É–ª—å —Ä–æ–ª–µ–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not await role_manager.check_permission(query.from_user.id, "admin", "view"):
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤.")
        return
    
    try:
        await query.answer("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤...")
        
        # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ª–æ–≥ —Ñ–∞–π–ª–∞
        log_file = "logs/sella_bot.log"
        try:
            with open(log_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
                last_lines = lines[-20:] if len(lines) > 20 else lines  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫
                log_content = ''.join(last_lines)
        except FileNotFoundError:
            log_content = "–õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."
        except Exception as e:
            log_content = f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {str(e)}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏", callback_data="admin_logs")],
            [InlineKeyboardButton("üìÅ –ü–æ–ª–Ω—ã–π –ª–æ–≥", callback_data="admin_full_log")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_users")]
        ])
        
        await query.edit_message_text(
            f"üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –±–æ—Ç–∞**\n\n"
            f"```\n{log_content[-3000:]}\n```\n\n"
            f"–ü–æ–∫–∞–∑–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {len(last_lines) if 'last_lines' in locals() else 0} —Å—Ç—Ä–æ–∫",
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

async def show_full_log(update: Update, context: ContextTypes.DEFAULT_TYPE, role_manager=None):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω—ã–π –ª–æ–≥"""
    query = update.callback_query
    
    try:
        await query.answer("üìÅ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ª–æ–≥–∞...")
        
        # –ß–∏—Ç–∞–µ–º –≤–µ—Å—å –ª–æ–≥ —Ñ–∞–π–ª
        log_file = "logs/sella_bot.log"
        try:
            with open(log_file, 'r', encoding='utf-8') as f:
                log_content = f.read()
        except FileNotFoundError:
            log_content = "–õ–æ–≥ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω."
        except Exception as e:
            log_content = f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞: {str(e)}"
        
        # –ï—Å–ª–∏ –ª–æ–≥ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª
        if len(log_content) > 4000:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            import tempfile
            with tempfile.NamedTemporaryFile(mode='w', suffix='.log', delete=False, encoding='utf-8') as f:
                f.write(log_content)
                temp_file = f.name
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            with open(temp_file, 'rb') as f:
                await context.bot.send_document(
                    chat_id=query.from_user.id,
                    document=f,
                    filename="sella_bot_full.log",
                    caption="üìÅ –ü–æ–ª–Ω—ã–π –ª–æ–≥ –±–æ—Ç–∞"
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            import os
            os.unlink(temp_file)
            
            await query.answer("üìÅ –ü–æ–ª–Ω—ã–π –ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç")
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_logs")]
            ])
            
            await query.edit_message_text(
                f"üìÅ **–ü–æ–ª–Ω—ã–π –ª–æ–≥ –±–æ—Ç–∞**\n\n"
                f"```\n{log_content}\n```",
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
        
    except Exception as e:
        await query.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}") 