#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –¥–ª—è Termux
–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ matplotlib/plotly, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ JSON
"""

import json
import os
import time
from datetime import datetime, timedelta
from typing import Dict, List, Any
import psutil

class SimpleAnalytics:
    def __init__(self, data_file: str = "analytics_data.json"):
        self.data_file = data_file
        self.data = self.load_data()
    
    def load_data(self) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.data_file):
            try:
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                pass
        return {
            "system_stats": [],
            "bot_events": [],
            "user_activity": {},
            "performance_metrics": []
        }
    
    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
        with open(self.data_file, 'w', encoding='utf-8') as f:
            json.dump(self.data, f, ensure_ascii=False, indent=2)
    
    def record_system_stats(self):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        stats = {
            "timestamp": datetime.now().isoformat(),
            "cpu_percent": psutil.cpu_percent(),
            "memory_percent": psutil.virtual_memory().percent,
            "disk_percent": psutil.disk_usage('/').percent
        }
        self.data["system_stats"].append(stats)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        if len(self.data["system_stats"]) > 1000:
            self.data["system_stats"] = self.data["system_stats"][-500:]
        
        self.save_data()
    
    def record_bot_event(self, event_type: str, details: str = ""):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –±–æ—Ç–∞"""
        event = {
            "timestamp": datetime.now().isoformat(),
            "type": event_type,
            "details": details
        }
        self.data["bot_events"].append(event)
        
        if len(self.data["bot_events"]) > 500:
            self.data["bot_events"] = self.data["bot_events"][-250:]
        
        self.save_data()
    
    def record_user_activity(self, user_id: int, action: str):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id_str = str(user_id)
        if user_id_str not in self.data["user_activity"]:
            self.data["user_activity"][user_id_str] = {
                "actions": [],
                "last_seen": None,
                "total_actions": 0
            }
        
        self.data["user_activity"][user_id_str]["actions"].append({
            "timestamp": datetime.now().isoformat(),
            "action": action
        })
        self.data["user_activity"][user_id_str]["last_seen"] = datetime.now().isoformat()
        self.data["user_activity"][user_id_str]["total_actions"] += 1
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if len(self.data["user_activity"][user_id_str]["actions"]) > 100:
            self.data["user_activity"][user_id_str]["actions"] = \
                self.data["user_activity"][user_id_str]["actions"][-50:]
        
        self.save_data()
    
    def get_system_summary(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å–≤–æ–¥–∫—É —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if not self.data["system_stats"]:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å–∏—Å—Ç–µ–º–µ"
        
        recent_stats = self.data["system_stats"][-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π
        
        avg_cpu = sum(s["cpu_percent"] for s in recent_stats) / len(recent_stats)
        avg_memory = sum(s["memory_percent"] for s in recent_stats) / len(recent_stats)
        avg_disk = sum(s["disk_percent"] for s in recent_stats) / len(recent_stats)
        
        current_stats = self.data["system_stats"][-1]
        
        summary = f"""
üìä –°–ò–°–¢–ï–ú–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê

üñ•Ô∏è CPU: {current_stats['cpu_percent']:.1f}% (—Å—Ä–µ–¥–Ω–µ–µ: {avg_cpu:.1f}%)
üíæ –ü–∞–º—è—Ç—å: {current_stats['memory_percent']:.1f}% (—Å—Ä–µ–¥–Ω–µ–µ: {avg_memory:.1f}%)
üíø –î–∏—Å–∫: {current_stats['disk_percent']:.1f}% (—Å—Ä–µ–¥–Ω–µ–µ: {avg_disk:.1f}%)
‚è∞ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {current_stats['timestamp'][:19]}
        """
        return summary.strip()
    
    def get_bot_events_summary(self, hours: int = 24) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É —Å–æ–±—ã—Ç–∏–π –±–æ—Ç–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Å—ã"""
        if not self.data["bot_events"]:
            return "–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –±–æ—Ç–∞"
        
        cutoff_time = datetime.now() - timedelta(hours=hours)
        recent_events = [
            e for e in self.data["bot_events"]
            if datetime.fromisoformat(e["timestamp"]) > cutoff_time
        ]
        
        if not recent_events:
            return f"–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤"
        
        event_counts = {}
        for event in recent_events:
            event_type = event["type"]
            event_counts[event_type] = event_counts.get(event_type, 0) + 1
        
        summary = f"ü§ñ –°–û–ë–´–¢–ò–Ø –ë–û–¢–ê (–∑–∞ {hours}—á):\n\n"
        for event_type, count in sorted(event_counts.items()):
            summary += f"‚Ä¢ {event_type}: {count}\n"
        
        summary += f"\n–í—Å–µ–≥–æ —Å–æ–±—ã—Ç–∏–π: {len(recent_events)}"
        return summary
    
    def get_user_activity_summary(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if not self.data["user_activity"]:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        sorted_users = sorted(
            self.data["user_activity"].items(),
            key=lambda x: x[1]["total_actions"],
            reverse=True
        )
        
        summary = "üë• –ê–ö–¢–ò–í–ù–û–°–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:\n\n"
        
        for user_id, data in sorted_users[:10]:  # –¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            last_seen = data["last_seen"][:19] if data["last_seen"] else "–ù–∏–∫–æ–≥–¥–∞"
            summary += f"‚Ä¢ ID {user_id}: {data['total_actions']} –¥–µ–π—Å—Ç–≤–∏–π\n"
            summary += f"  –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑: {last_seen}\n\n"
        
        total_users = len(self.data["user_activity"])
        total_actions = sum(data["total_actions"] for data in self.data["user_activity"].values())
        
        summary += f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}"
        summary += f"\n–í—Å–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π: {total_actions}"
        
        return summary
    
    def get_performance_report(self) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        report = "üìà –û–¢–ß–ï–¢ –û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò\n"
        report += "=" * 40 + "\n\n"
        
        report += self.get_system_summary() + "\n\n"
        report += self.get_bot_events_summary() + "\n\n"
        report += self.get_user_activity_summary()
        
        return report
    
    def cleanup_old_data(self, days: int = 30):
        """–£–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        cutoff_time = datetime.now() - timedelta(days=days)
        
        # –û—á–∏—â–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        self.data["system_stats"] = [
            s for s in self.data["system_stats"]
            if datetime.fromisoformat(s["timestamp"]) > cutoff_time
        ]
        
        # –û—á–∏—â–∞–µ–º —Å–æ–±—ã—Ç–∏—è –±–æ—Ç–∞
        self.data["bot_events"] = [
            e for e in self.data["bot_events"]
            if datetime.fromisoformat(e["timestamp"]) > cutoff_time
        ]
        
        # –û—á–∏—â–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for user_data in self.data["user_activity"].values():
            user_data["actions"] = [
                a for a in user_data["actions"]
                if datetime.fromisoformat(a["timestamp"]) > cutoff_time
            ]
        
        self.save_data()

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    analytics = SimpleAnalytics()
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    analytics.record_system_stats()
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –±–æ—Ç–∞
    analytics.record_bot_event("startup", "–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    analytics.record_user_activity(123456789, "–æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ")
    
    # –í—ã–≤–æ–¥–∏–º –æ—Ç—á–µ—Ç
    print(analytics.get_performance_report()) 