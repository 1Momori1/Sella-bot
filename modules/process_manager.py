import asyncio
import subprocess
import psutil
import logging
import os
from typing import Dict, List, Optional, Any
from datetime import datetime
import time

class ProcessManager:
    """–ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏"""
    
    def __init__(self, config: dict, role_manager):
        self.config = config.get("bots", {})
        self.role_manager = role_manager
        self.logger = logging.getLogger(__name__)
        self.processes = {}  # {bot_name: process_info}
        
    async def get_bots_status(self, user_id: int) -> Optional[List[Dict[str, Any]]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        if not await self.role_manager.check_permission(user_id, "processes", "view"):
            return None
            
        bots_status = []
        
        for bot_name, bot_config in self.config.items():
            if not bot_config.get("enabled", True):
                continue
                
            status = await self._get_bot_status(bot_name, bot_config)
            bots_status.append({
                "name": bot_name,
                "display_name": bot_config.get("name", bot_name),
                "status": status["status"],
                "pid": status["pid"],
                "uptime": status["uptime"],
                "memory_mb": status["memory_mb"],
                "cpu_percent": status["cpu_percent"],
                "path": bot_config.get("path", ""),
                "auto_restart": bot_config.get("auto_restart", False)
            })
            
        return bots_status
    
    async def _get_bot_status(self, bot_name: str, bot_config: dict) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞"""
        try:
            # –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            process_path = bot_config.get("path", "")
            if not process_path:
                return {"status": "unknown", "pid": None, "uptime": "0", "memory_mb": 0, "cpu_percent": 0}
            
            script_name = os.path.basename(process_path)
            
            for proc in psutil.process_iter(['pid', 'name', 'cmdline', 'create_time', 'memory_info', 'cpu_percent']):
                try:
                    proc_info = proc.info
                    cmdline = proc_info.get('cmdline', [])
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∏–º–µ–Ω–∏ —Å–∫—Ä–∏–ø—Ç–∞
                    if any(script_name in cmd for cmd in cmdline if cmd):
                        uptime_seconds = int(time.time() - proc_info['create_time'])
                        uptime_str = self._format_uptime(uptime_seconds)
                        
                        return {
                            "status": "running",
                            "pid": proc_info['pid'],
                            "uptime": uptime_str,
                            "memory_mb": round(proc_info['memory_info'].rss / (1024**2), 1),
                            "cpu_percent": round(proc_info['cpu_percent'], 1)
                        }
                        
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
            
            return {"status": "stopped", "pid": None, "uptime": "0", "memory_mb": 0, "cpu_percent": 0}
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ {bot_name}: {e}")
            return {"status": "error", "pid": None, "uptime": "0", "memory_mb": 0, "cpu_percent": 0}
    
    async def start_bot(self, bot_name: str, user_id: int) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not await self.role_manager.check_permission(user_id, "processes", "manage"):
            return {"success": False, "message": "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏"}
            
        if bot_name not in self.config:
            return {"success": False, "message": f"‚ùå –ë–æ—Ç {bot_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"}
            
        bot_config = self.config[bot_name]
        if not bot_config.get("enabled", True):
            return {"success": False, "message": f"‚ùå –ë–æ—Ç {bot_name} –æ—Ç–∫–ª—é—á–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"}
            
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ
            current_status = await self._get_bot_status(bot_name, bot_config)
            if current_status["status"] == "running":
                return {"success": False, "message": f"‚úÖ –ë–æ—Ç {bot_name} —É–∂–µ –∑–∞–ø—É—â–µ–Ω"}
            
            # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
            process_path = bot_config.get("path")
            if not process_path or not os.path.exists(process_path):
                return {"success": False, "message": f"‚ùå –§–∞–π–ª {process_path} –Ω–µ –Ω–∞–π–¥–µ–Ω"}
            
            # –ó–∞–ø—É—Å–∫ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            process = subprocess.Popen(
                ["python", process_path],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                cwd=os.path.dirname(process_path)
            )
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
            self.processes[bot_name] = {
                "pid": process.pid,
                "start_time": datetime.now(),
                "started_by": user_id
            }
            
            self.logger.info(f"–ë–æ—Ç {bot_name} –∑–∞–ø—É—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} (PID: {process.pid})")
            return {"success": True, "message": f"‚úÖ –ë–æ—Ç {bot_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})"}
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ {bot_name}: {e}")
            return {"success": False, "message": f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ {bot_name}: {str(e)}"}
    
    async def stop_bot(self, bot_name: str, user_id: int) -> Dict[str, Any]:
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        if not await self.role_manager.check_permission(user_id, "processes", "manage"):
            return {"success": False, "message": "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞–º–∏"}
            
        try:
            # –ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞
            bot_config = self.config.get(bot_name, {})
            current_status = await self._get_bot_status(bot_name, bot_config)
            
            if current_status["status"] != "running":
                return {"success": False, "message": f"‚ùå –ë–æ—Ç {bot_name} –Ω–µ –∑–∞–ø—É—â–µ–Ω"}
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
            pid = current_status["pid"]
            if pid:
                process = psutil.Process(pid)
                process.terminate()
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
                try:
                    process.wait(timeout=10)
                except psutil.TimeoutExpired:
                    process.kill()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                
                # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                if bot_name in self.processes:
                    del self.processes[bot_name]
                
                self.logger.info(f"–ë–æ—Ç {bot_name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
                return {"success": True, "message": f"‚úÖ –ë–æ—Ç {bot_name} —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"}
            
            return {"success": False, "message": f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞ {bot_name}"}
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ {bot_name}: {e}")
            return {"success": False, "message": f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ {bot_name}: {str(e)}"}
    
    async def restart_bot(self, bot_name: str, user_id: int) -> Dict[str, Any]:
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not await self.role_manager.check_permission(user_id, "processes", "restart"):
            return {"success": False, "message": "‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"}
            
        # –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        stop_result = await self.stop_bot(bot_name, user_id)
        if not stop_result["success"] and "–Ω–µ –∑–∞–ø—É—â–µ–Ω" not in stop_result["message"]:
            return stop_result
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
        await asyncio.sleep(2)
        
        # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º
        start_result = await self.start_bot(bot_name, user_id)
        if start_result["success"]:
            return {"success": True, "message": f"‚úÖ –ë–æ—Ç {bot_name} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"}
        else:
            return {"success": False, "message": f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ {bot_name}: {start_result['message']}"}
    
    async def get_bots_status_text(self, user_id: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–æ–≤ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ"""
        if not await self.role_manager.check_permission(user_id, "processes", "view"):
            return "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö"
            
        bots_status = await self.get_bots_status(user_id)
        if not bots_status:
            return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–æ–≤"
        
        status_text = "ü§ñ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–æ–≤**\n\n"
        
        for bot in bots_status:
            status_emoji = "üü¢" if bot["status"] == "running" else "üî¥"
            auto_restart_emoji = "üîÑ" if bot["auto_restart"] else "‚èπÔ∏è"
            
            status_text += f"{status_emoji} **{bot['display_name']}**\n"
            status_text += f"   –°—Ç–∞—Ç—É—Å: {bot['status']}\n"
            
            if bot["status"] == "running":
                status_text += f"   PID: {bot['pid']}\n"
                status_text += f"   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {bot['uptime']}\n"
                status_text += f"   RAM: {bot['memory_mb']}MB\n"
                status_text += f"   CPU: {bot['cpu_percent']}%\n"
            
            status_text += f"   –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫: {auto_restart_emoji}\n\n"
        
        return status_text
    
    def _format_uptime(self, seconds: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã"""
        days = seconds // 86400
        hours = (seconds % 86400) // 3600
        minutes = (seconds % 3600) // 60
        
        if days > 0:
            return f"{days}–¥ {hours}—á {minutes}–º"
        elif hours > 0:
            return f"{hours}—á {minutes}–º"
        else:
            return f"{minutes}–º"
    
    async def get_all_processes(self, user_id: int, limit: int = 20) -> Optional[List[Dict[str, Any]]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
        if not await self.role_manager.check_permission(user_id, "processes", "view"):
            return None
            
        try:
            processes = []
            for proc in psutil.process_iter(['pid', 'name', 'cpu_percent', 'memory_info', 'create_time']):
                try:
                    proc_info = proc.info
                    if proc_info['cpu_percent'] > 0 or proc_info['memory_info'].rss > 1024*1024:  # > 1MB
                        uptime_seconds = int(time.time() - proc_info['create_time'])
                        
                        processes.append({
                            "pid": proc_info['pid'],
                            "name": proc_info['name'],
                            "cpu_percent": round(proc_info['cpu_percent'], 1),
                            "memory_mb": round(proc_info['memory_info'].rss / (1024**2), 1),
                            "uptime": self._format_uptime(uptime_seconds)
                        })
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
            
            # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é CPU
            processes.sort(key=lambda x: x['cpu_percent'], reverse=True)
            return processes[:limit]
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
            return None 